/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if ((from && typeof from === "object") || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
        });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (
  (target = mod != null ? __create(__getProtoOf(mod)) : {}),
  __copyProps(
    isNodeMode || !mod || !mod.__esModule
      ? __defProp(target, "default", { value: mod, enumerable: true })
      : target,
    mod
  )
);
var __toCommonJS = (mod) =>
  __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VCCopilotPlugin,
  gpt_3_latest: () => gpt_3_latest,
  gpt_4_latest: () => gpt_4_latest2,
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/utils.ts
var import_obsidian = require("obsidian");
var url_affinity_organizations = "https://api.affinity.co/organizations";
var url_affinity_note = "https://api.affinity.co/notes";
var url_affinity_persons = "https://api.affinity.co/persons";
var url_affinity_field_values = "https://api.affinity.co/field-values";
var url_affinity_list = "https://api.affinity.co/lists";
function affinity_authorization(affinityAPIKey2) {
  let username = "";
  let pwd = affinityAPIKey2;
  let auth = "Basic " + Buffer.from(username + ":" + pwd).toString("base64");
  let headers = { Authorization: auth, "Content-Type": "application/json" };
  return headers;
}
async function add_notes_to_company(startup, note, affinityAPIKey2) {
  let headers = affinity_authorization(affinityAPIKey2);
  let organization_ids = [startup["id"]];
  console.log(organization_ids);
  console.log(note);
  let note_data = { organization_ids: [startup["id"]], content: note };
  let r = await (0, import_obsidian.request)({
    url: url_affinity_note,
    method: "POST",
    headers,
    body: JSON.stringify(note_data),
  })
    .then((data) => console.log(data))
    .catch((error) => {
      console.error(error);
      if (error) {
        return null;
      }
    });
  return "Success";
}
async function get_startup_by_name(
  affinityAPIKey2,
  owner_value2,
  startup_name
) {
  let subnames = startup_name.split(" ");
  let search_term = subnames[0];
  if (subnames.length > 1) {
    for (let name of subnames.slice(1)) {
      search_term = search_term + "+" + name;
    }
  }
  console.log(search_term);
  let next_page_token = null;
  let headers = affinity_authorization(affinityAPIKey2);
  while (true) {
    let full_url =
      url_affinity_organizations +
      "?term=" +
      search_term +
      "&with_interaction_dates=true&with_interaction_persons=true";
    if (next_page_token != null) {
      full_url += "&page_token=" + next_page_token;
    }
    let r = await (0, import_obsidian.request)({
      url: full_url,
      method: "GET",
      headers,
    });
    let response = JSON.parse(r);
    let organizations = response["organizations"];
    next_page_token = response["next_page_token"];
    for (let organization of organizations) {
      if (organization["interactions"]) {
        for (let [interaction_name, interaction_data] of Object.entries(
          organization["interactions"]
        )) {
          if (interaction_data) {
            let people_involved = interaction_data["person_ids"].toString();
            if (people_involved.includes(owner_value2)) {
              return organization;
            }
          } else {
            break;
          }
        }
      }
    }
    if (next_page_token == null) {
      return null;
    }
  }
}
async function get_person_by_name(affinityAPIKey2, person_name) {
  let names = person_name.split(" ");
  if (names.length > 1) {
    let next_page_token = null;
    let headers = affinity_authorization(affinityAPIKey2);
    let first_name = names[0];
    let last_name = names[1];
    while (true) {
      let full_url = url_affinity_persons + "?term=" + last_name;
      if (next_page_token != null) {
        full_url += "&page_token=" + next_page_token;
      }
      let r = await (0, import_obsidian.request)({
        url: full_url,
        method: "GET",
        headers,
      });
      let response = JSON.parse(r);
      let people = response["persons"];
      next_page_token = response["next_page_token"];
      for (let person of people) {
        if (
          person["first_name"] == first_name &&
          person["last_name"] == last_name
        ) {
          return person;
        }
      }
      if (next_page_token == null) {
        break;
      }
    }
    return null;
  } else {
    return null;
  }
  return null;
}
async function get_person_details(affinityAPIKey2, person_id) {
  let full_url = url_affinity_persons + "/" + person_id.toString();
  let headers = affinity_authorization(affinityAPIKey2);
  let r = await (0, import_obsidian.request)({
    url: full_url,
    method: "GET",
    headers,
  });
  let response = JSON.parse(r);
  return response;
}
async function is_person_in_venture_network(
  affinityAPIKey2,
  person_details,
  venture_network_list_id
) {
  let list_entries = person_details["list_entries"];
  for (let entry of list_entries) {
    if (entry["list_id"].toString() == venture_network_list_id.toString()) {
      return entry["id"];
    }
  }
  return null;
}
async function add_entry_to_list(affinityAPIKey2, list_id, entity_id) {
  let headers = affinity_authorization(affinityAPIKey2);
  let full_url = url_affinity_list + "/" + list_id + "/list-entries";
  let data = { entity_id };
  let r = await (0, import_obsidian.request)({
    url: full_url,
    method: "POST",
    headers,
    body: JSON.stringify(data),
  })
    .then((data2) => console.log(data2))
    .catch((error) => {
      console.error(error);
      if (error) {
        return null;
      }
    });
  return "Success";
}
async function add_field_value(
  affinityAPIKey2,
  field_id,
  entity_id,
  value,
  list_entry_id
) {
  let headers = affinity_authorization(affinityAPIKey2);
  let full_url = url_affinity_field_values;
  let data = {
    field_id,
    entity_id,
    value,
    list_entry_id,
  };
  let r = await (0, import_obsidian.request)({
    url: full_url,
    method: "POST",
    headers,
    body: JSON.stringify(data),
  })
    .then((data2) => console.log(data2))
    .catch((error) => {
      console.error(error);
      if (error) {
        return null;
      }
    });
  return "Success";
}
async function add_notes_to_person(affinityAPIKey2, person_id, notes) {
  let full_url = url_affinity_note;
  let headers = affinity_authorization(affinityAPIKey2);
  let data = { person_ids: [person_id], content: notes };
  let r = await (0, import_obsidian.request)({
    url: full_url,
    method: "POST",
    headers,
    body: JSON.stringify(data),
  })
    .then((data2) => console.log(data2))
    .catch((error) => {
      console.error(error);
      if (error) {
        return null;
      }
    });
  return "Success";
}
function startup_ready_for_affinity(file_content) {
  return (
    file_content.includes("#startups/screened") &&
    file_content.includes("#Affinity")
  );
}
function extract_title_and_note(text) {
  let pattern = /^# .*\n/gm;
  let matches = text.match(pattern);
  let title = "";
  if (matches) {
    title = matches[0];
  }
  let substrings = text.split(pattern);
  console.log(`Title: ${title}`);
  console.log(substrings);
  return [title, substrings];
}
function clean_text(startup_name) {
  startup_name = startup_name.replace(/[^A-Za-z0-9\s.]/g, "");
  startup_name = startup_name.trim();
  return startup_name;
}
function is_summarizable(file_content) {
  return (
    file_content.includes("#network/connected") &&
    (file_content.includes("#Entity/VC") ||
      file_content.includes("#Person/VC")) &&
    file_content.includes("#gpt_summarized") != true &&
    file_content.includes("dataview") != true
  );
}
function vc_ready_for_affinity(file_content) {
  return (
    file_content.includes("#gpt_summarized") &&
    file_content.includes("#Affinity")
  );
}
function countWords(str2) {
  let words = str2.match(/\b[a-z\d]+\b/gi);
  return words ? words.length : 0;
}
function extract_startup_details(startup) {
  let startup_details = {};
  startup_details["name"] = startup["name"];
  startup_details["domain"] = startup["domain"];
  try {
    startup_details["description"] = startup["description"]["long"];
  } catch (e) {
    startup_details["description"] = startup["description"]["short"];
  }
  startup_details["totalMoneyRaised"] = startup["totalMoneyRaised"];
  startup_details["foundedYear"] = startup["foundedYear"];
  startup_details["location"] = startup["location"];
  startup_details["stage"] = startup["stage"];
  startup_details["investorList"] = startup["investorList"];
  startup_details["profileLinks"] = startup["profileLinks"];
  startup_details["newsInfo"] = startup["newsInfo"];
  startup_details["metrics"] = startup["metrics"];
  startup_details["tracxnTeamScore"] = startup["tracxnTeamScore"];
  startup_details["tracxnScore"] = startup["tracxnScore"];
  return startup_details;
}
function get_acquisition_details(startup) {
  let acquirersString = "";
  let acquirers = startup["acquirerInfo"]["acquirerList"][0]["acquirers"];
  let acquisitionYear =
    startup["acquirerInfo"]["acquirerList"][0]["date"]["year"];
  let counter = 0;
  for (let acquirer of acquirers) {
    if (counter == 0) {
      acquirersString += `[${acquirer["name"]}](${acquirer["domain"]})`;
    } else {
      acquirersString += `, [${acquirer["name"]}](${acquirer["domain"]})`;
    }
    counter += 1;
  }
  return { Acquirers: acquirersString, AcquisitionYear: acquisitionYear };
}
function get_ipo_details(startup) {
  let result = {};
  let ipoList = startup["ipoInfo"]["ipoList"];
  for (let ipo of ipoList) {
    if (ipo["marketCap"]) {
      result["marketCap"] = ipo["marketCap"];
      result["ipoYear"] = ipo["date"]["year"];
      result["stockExchange"] = ipo["stockExchange"];
      result["stockSymbol"] = ipo["stockSymbol"];
    }
  }
  return result;
}
function get_keys_for_table(allKeys) {
  const excludedKeys = ["newsInfo", "metrics", "domain"];
  let finalKeys = [];
  for (let key of allKeys) {
    if (!excludedKeys.includes(key)) {
      finalKeys.push(key);
    }
  }
  return finalKeys;
}
function formatNumber(number) {
  const abbreviations = {
    T: 1e12,
    B: 1e9,
    M: 1e6,
    K: 1e3,
  };
  for (const abbreviation in abbreviations) {
    if (number >= abbreviations[abbreviation]) {
      const roundedNumber = Math.ceil(number / abbreviations[abbreviation]);
      return roundedNumber + abbreviation;
    }
  }
  return number.toString();
}
function formattedCountryName(countryName) {
  const formattedCountryName2 =
    countryName.charAt(0).toUpperCase() + countryName.slice(1).toLowerCase();
  return formattedCountryName2;
}
function isCountryInEurope(countryName) {
  const europeanCountries = [
    "Albania",
    "Andorra",
    "Austria",
    "Belarus",
    "Belgium",
    "Bosnia and Herzegovina",
    "Bulgaria",
    "Croatia",
    "Cyprus",
    "Czech Republic",
    "Denmark",
    "Estonia",
    "Finland",
    "France",
    "Germany",
    "Greece",
    "Hungary",
    "Iceland",
    "Ireland",
    "Italy",
    "Kosovo",
    "Latvia",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Malta",
    "Moldova",
    "Monaco",
    "Montenegro",
    "Netherlands",
    "North Macedonia",
    "Norway",
    "Poland",
    "Portugal",
    "Romania",
    "Russia",
    "San Marino",
    "Serbia",
    "Slovakia",
    "Slovenia",
    "Spain",
    "Sweden",
    "Switzerland",
    "Ukraine",
    "United Kingdom",
    "UK",
    "Vatican City",
  ];
  return europeanCountries.includes(formattedCountryName(countryName));
}
function isCountryInEasternEurope(countryName) {
  const easternEuropeanCountries = [
    "Albania",
    "Belarus",
    "Bosnia and Herzegovina",
    "Bulgaria",
    "Croatia",
    "Cyprus",
    "Czech Republic",
    "Estonia",
    "Hungary",
    "Kosovo",
    "Latvia",
    "Lithuania",
    "Moldova",
    "Montenegro",
    "North Macedonia",
    "Poland",
    "Romania",
    "Russia",
    "Serbia",
    "Slovakia",
    "Slovenia",
    "Ukraine",
  ];
  return easternEuropeanCountries.includes(formattedCountryName(countryName));
}
function isCountryInNordics(countryName) {
  const nordicCountries = ["Denmark", "Finland", "Iceland", "Norway", "Sweden"];
  return nordicCountries.includes(formattedCountryName(countryName));
}
function geo_check(input_country, investor_geo) {
  input_country = input_country.toLowerCase();
  let usa_abbreviations = [
    "usa",
    "us",
    "united states",
    "america",
    "united states of america",
  ];
  if (
    investor_geo.some((geo) => geo.includes("globally")) ||
    investor_geo.some((geo) => geo.includes("agnostic")) ||
    investor_geo.some((geo) => geo.includes("world-wide"))
  ) {
    return true;
  }
  if (investor_geo.some((geo) => geo.includes(input_country))) {
    return true;
  }
  if (
    isCountryInEurope(input_country) &&
    (investor_geo.some((geo) => geo.includes("europe")) ||
      investor_geo.some((geo) => geo.includes("eu")))
  ) {
    return true;
  }
  if (
    isCountryInEasternEurope(input_country) &&
    investor_geo.some((geo) => geo.includes("eastern europe"))
  ) {
    return true;
  }
  if (
    isCountryInNordics(input_country) &&
    investor_geo.some((geo) => geo.includes("nordics"))
  ) {
    return true;
  }
  if (usa_abbreviations.includes(input_country)) {
    for (let geo of investor_geo) {
      if (usa_abbreviations.some((abbrev) => geo.includes(abbrev))) {
        return true;
      }
    }
  }
  return false;
}
function stage_check(input_stage, investor_stage) {
  input_stage = input_stage.toLowerCase();
  if (
    investor_stage.some((stage) => stage.includes("pre-seed")) ||
    investor_stage.some((stage) => stage.includes("preseed"))
  ) {
    investor_stage.push("pre-seed");
    investor_stage.push("preseed");
  }
  return investor_stage.some((stage) => stage.includes(input_stage));
}
function formatObjectsToMarkdownTable(objects, specialFormat) {
  if (objects.length === 0) {
    return "";
  }
  let keys = [];
  if (specialFormat) {
    keys = get_keys_for_table(Object.keys(objects[0]));
  } else {
    keys = Object.keys(objects[0]);
  }
  let table = "|";
  for (let i = 0; i < keys.length; i++) {
    table += ` ${keys[i]} |`;
  }
  table += "\n|";
  for (let i = 0; i < keys.length; i++) {
    table += " --- |";
  }
  for (let i = 0; i < objects.length; i++) {
    table += "\n|";
    for (let j = 0; j < keys.length; j++) {
      let displayedResult = "";
      try {
        if (keys[j] == "totalMoneyRaised") {
          displayedResult =
            formatNumber(objects[i][keys[j]]["totalAmount"]["amount"]) +
            " " +
            objects[i][keys[j]]["totalAmount"]["currency"];
        } else if (keys[j] == "investorList") {
          let investorListDisplay = "";
          let counter = 0;
          for (let investor of objects[i]["investorList"]) {
            let investorDisplay = `[${investor["name"]}](https://${investor["domain"]})`;
            if (counter == 0) {
              investorListDisplay += investorDisplay;
            } else {
              investorListDisplay += ", " + investorDisplay;
            }
            counter += 1;
          }
          displayedResult = investorListDisplay;
        } else if (keys[j] == "location") {
          displayedResult = objects[i]["location"]["country"];
        } else if (keys[j] == "tracxnTeamScore" || keys[j] == "tracxnScore") {
          displayedResult = Math.ceil(objects[i][keys[j]]).toFixed(0);
        } else if (keys[j] == "profileLinks") {
          let counter = 0;
          for (let [type, link] of Object.entries(objects[i]["profileLinks"])) {
            if (counter == 0) {
              displayedResult += `[${type}](${link})`;
            } else {
              displayedResult += `, [${type}](${link})`;
            }
            counter += 1;
          }
        } else if (keys[j] == "name") {
          let domain = objects[i]["domain"];
          displayedResult = `[${objects[i]["name"]}](https://${domain})`;
        } else if (keys[j] == "marketCap") {
          displayedResult =
            formatNumber(objects[i]["marketCap"]["amount"]) +
            " " +
            objects[i]["marketCap"]["currency"];
        } else {
          displayedResult = objects[i][keys[j]];
        }
      } catch (e) {
        console.error(
          `${objects[i]["name"]} had an error with the key ${keys[j]}`
        );
      }
      table += ` ${displayedResult} |`;
    }
  }
  return table;
}
function get_relevant_feeds(startupsList) {
  let relevant_feeds = {};
  for (let startup of startupsList) {
    let businessModels = startup["businessModelList"];
    for (let businessModel of businessModels) {
      relevant_feeds[businessModel["fullPathString"]] =
        businessModel["companiesInEntireTreeUrl"];
    }
  }
  return relevant_feeds;
}
function find_eligible_investors(investors, input_country, input_stage) {
  let fit_investors = [];
  for (let investor of investors) {
    if (
      geo_check(input_country, investor["geo"]) &&
      stage_check(input_stage, investor["stage"])
    ) {
      fit_investors.push(investor);
    }
  }
  return fit_investors;
}
function extractStage(str2) {
  str2 = str2.toLowerCase();
  const keywords = [
    "pre-seed",
    "preseed",
    "seed",
    "series a",
    "series b",
    "series c",
    "series d",
  ];
  const regex = new RegExp(keywords.join("|"), "gi");
  const mentions = str2.match(regex) || [""];
  return mentions;
}
function extractGeography(str2) {
  const regex = /Geography::(.*)/i;
  const match = str2.match(regex);
  if (match) {
    let line = match[1].trim();
    let geos = line.split(",");
    let counter = 0;
    for (let geo of geos) {
      geos[counter] = geo.trim().toLowerCase();
      counter += 1;
    }
    return geos;
  }
  return [""];
}
function extractIndustry(str2) {
  const regex = /Industry::(.*)/i;
  const match = str2.match(regex);
  if (match) {
    let industry = match[1].trim();
    return industry;
  }
  return [""];
}
function extractSpeciality(str2) {
  const regex = /Special::?(.*)/i;
  const match = str2.match(regex);
  if (match) {
    let industry = match[1].trim();
    return industry;
  }
  return "";
}
function createInvestorObject(name, geographies, stages, industry, speciality) {
  const investorObject = {
    name,
    geo: geographies,
    stage: stages,
    industry,
    speciality,
  };
  return investorObject;
}
function generate_investor_json(investor_name, investor_text) {
  let name = investor_name;
  let geographies = extractGeography(investor_text);
  let stages = extractStage(investor_text);
  let industry = extractIndustry(investor_text);
  let speciality = extractSpeciality(investor_text);
  return createInvestorObject(name, geographies, stages, industry, speciality);
}
function extractTextToEndOfLine(fullText, searchString) {
  const index = fullText.indexOf(searchString);
  if (index !== -1) {
    const endOfLineIndex = fullText.indexOf("\n", index);
    if (endOfLineIndex !== -1) {
      return fullText
        .substring(index + searchString.length, endOfLineIndex)
        .trim();
    } else {
      return fullText.substring(index + searchString.length).trim();
    }
  }
  return "";
}
function format_matching_prompt(investors, startup_desc) {
  let prompt =
    "You will now get a list of information about some investors. Please read it carefully because you will be asked about it later.\n\n<investor-list>";
  for (let investor of investors) {
    let investor_name = investor["name"];
    let investor_industry = investor["industry"];
    let investor_speciality = investor["speciality"];
    let investor_desc = `
<investor-info>
- Name: ${investor_name}
- Industry: ${investor_industry}
- Speciality: ${investor_speciality}
</investor-info>`;
    prompt += investor_desc;
  }
  prompt += "\n</investor-list>";
  prompt +=
    "\n\nNow you will be given some information about a startup. Read it carefully.";
  prompt += `

<startup-info>
${startup_desc}
<startup-info>

`;
  prompt += `From the list of investors, choose only suitable investors for the startup.

From the list of investors, choose all suitable investors for the startup.

First you must think deeply about the suitability of each single investor with regard to the startup between the XML tags <thinking> and </thinking>. Then give your final answer as the names of the suitable investors delimited by commas between the XML tags <investors> and </investors>.`;
  return prompt;
}
function extractResoningText(inputString) {
  const startTag = "<thinking>";
  const endTag = "</thinking>";
  const startIndex = inputString.indexOf(startTag) + startTag.length;
  const endIndex = inputString.indexOf(endTag);
  if (startIndex === -1 || endIndex === -1 || startIndex >= endIndex) {
    return "";
  }
  return inputString.substring(startIndex, endIndex).trim();
}
function extractInvestorsText(inputString) {
  const startTag = "<investors>";
  const endTag = "</investors>";
  const startIndex = inputString.indexOf(startTag) + startTag.length;
  const endIndex = inputString.indexOf(endTag);
  if (startIndex === -1 || endIndex === -1 || startIndex >= endIndex) {
    return "";
  }
  return inputString.substring(startIndex, endIndex).trim();
}

// src/modal.ts
var import_obsidian2 = require("obsidian");
var TextInputModal = class extends import_obsidian2.Modal {
  constructor(app2, type, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
    this.type = type;
  }
  onOpen() {
    const { contentEl } = this;
    let title = "";
    if (this.type == "market-research") {
      title = "What industry do you want to research?";
    }
    if (this.type == "defensibility") {
      title = "Describe the startup whose defensibility is to be evaluated";
    }
    if (this.type == "evaluate") {
      title = "Describe the startup to be evaluated";
    }
    if (this.type == "url-research") {
      title = "Enter url to investigate";
    }
    if (this.type == "fireflies-summary") {
      title =
        "Insert the name of the fireflies recording/meeting you would like to summarize";
    }
    if (this.type == "competition") {
      title = "Describe the startup or industry for competition research";
    }
    contentEl.createEl("h2", { text: title });
    const inputEl = contentEl.createEl("textarea");
    inputEl.addEventListener("input", (event) => {
      event.stopPropagation();
    });
    const submitButton = contentEl.createEl("button", { text: "Submit" });
    submitButton.style.position = "absolute";
    submitButton.style.bottom = "0";
    submitButton.style.right = "0";
    submitButton.addEventListener("click", () => {
      this.onsubmit(inputEl.value);
      this.close();
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var MultipleTextInputModal = class extends import_obsidian2.Modal {
  constructor(app2, type, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
    this.type = type;
  }
  onOpen() {
    const { contentEl } = this;
    let title = "What topic would you like to research today?";
    contentEl.createEl("h2", { text: title });
    let query = new import_obsidian2.Setting(contentEl)
      .setName("Search Query")
      .addText((text) =>
        text.onChange((value) => {
          this.query = value;
        })
      );
    let web = new import_obsidian2.Setting(contentEl)
      .setName("Website to Search")
      .addText((text) =>
        text.onChange((value) => {
          this.website = value;
        })
      );
    new import_obsidian2.Setting(contentEl)
      .setName("Task to do")
      .addDropdown((menu) => {
        menu.addOption("competition", "Find & Analyze competitors");
        menu.addOption("market-research", "Investor Summary");
        menu.setValue("....");
        menu.onChange((value) => {
          this.task = value;
        });
      });
    let button = new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn
        .setButtonText("Submit")
        .setCta()
        .onClick(() => {
          this.close();
          this.onsubmit(this.website + ", " + this.query + ", " + this.task);
        });
    });
  }
};
var FireFliesTemp = class extends import_obsidian2.Modal {
  constructor(app2, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
  }
  onOpen() {
    const { contentEl } = this;
    let title = "Give me the json string of transcript";
    contentEl.createEl("h2", { text: title });
    let query = new import_obsidian2.Setting(contentEl)
      .setName("Json String")
      .addTextArea((text) =>
        text.onChange((value) => {
          this.json_string = value;
        })
      );
    let web = new import_obsidian2.Setting(contentEl)
      .setName("Meeting name")
      .addText((text) =>
        text.onChange((value) => {
          this.meeting_name = value;
        })
      );
    let button = new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn
        .setButtonText("Submit")
        .setCta()
        .onClick(() => {
          this.close();
          this.onsubmit(this.json_string + "&&& " + this.meeting_name);
        });
    });
  }
};
var SpokeModal = class extends import_obsidian2.Modal {
  constructor(app2, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
    this.isDetailed = false;
  }
  onOpen() {
    const { contentEl } = this;
    let title = "Summarise the call recorded by Spoke.app";
    contentEl.createEl("h2", { text: title });
    new import_obsidian2.Setting(contentEl)
      .setName("Meeting name")
      .addText((text) =>
        text.onChange((value) => {
          this.meeting_name = value;
        })
      );
    new import_obsidian2.Setting(contentEl)
      .setName("Detailed Meeting")
      .addToggle((component) => {
        component.onChange((value) => {
          this.isDetailed = value;
        });
      });
    let button = new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn
        .setButtonText("Submit")
        .setCta()
        .onClick(() => {
          this.close();
          this.onsubmit(this.meeting_name + ", " + this.isDetailed);
        });
    });
  }
};
var WorkflowModal = class extends import_obsidian2.Modal {
  constructor(app2, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
    this.isGroq = false;
  }
  onOpen() {
    const { contentEl } = this;
    let title =
      "Describe the startup you want to analyze and if you want to use Groq";
    contentEl.createEl("h2", { text: title });
    new import_obsidian2.Setting(contentEl)
      .setName("Startup Description")
      .addTextArea((text) =>
        text.onChange((value) => {
          this.desc = value;
        })
      );
    new import_obsidian2.Setting(contentEl)
      .setName("Use Groq?")
      .addToggle((component) => {
        component.onChange((value) => {
          this.isGroq = value;
        });
      });
    let button = new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn
        .setButtonText("Submit")
        .setCta()
        .onClick(() => {
          this.close();
          this.onsubmit(this.desc + "//-- " + this.isGroq);
        });
    });
  }
};
var FindInvestorModal = class extends import_obsidian2.Modal {
  constructor(app2, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
  }
  onOpen() {
    const { contentEl } = this;
    let title = "Describe the startup you want to find investors for";
    contentEl.createEl("h2", { text: title });
    let query = new import_obsidian2.Setting(contentEl)
      .setName("Startup Description")
      .addTextArea((text) =>
        text.onChange((value) => {
          this.company = value;
        })
      );
    let web = new import_obsidian2.Setting(contentEl)
      .setName("Stage")
      .setDesc("e.g, Preseed, Seed, etc")
      .addText((text) =>
        text.onChange((value) => {
          this.stage = value;
        })
      );
    new import_obsidian2.Setting(contentEl)
      .setName("Location")
      .setDesc("insert the country where the startup is located")
      .addText((text) =>
        text.onChange((value) => {
          this.location = value;
        })
      );
    let button = new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn
        .setButtonText("Submit")
        .setCta()
        .onClick(() => {
          this.close();
          this.onsubmit(
            this.company + ", " + this.stage + ", " + this.location
          );
        });
    });
  }
};
var PDFModal = class extends import_obsidian2.FuzzySuggestModal {
  constructor(app2, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
  }
  getItems() {
    return this.app.vault
      .getFiles()
      .filter((file) => file.extension.includes("pdf"));
  }
  getItemText(file) {
    return file.name;
  }
  onChooseItem(file, evt) {
    this.onsubmit(file.path);
  }
};
var TracxnModal = class extends import_obsidian2.Modal {
  constructor(app2, onsubmit) {
    super(app2);
    this.onsubmit = onsubmit;
    this.isIPO = false;
    this.isAcquired = false;
    this.companies_per_request = "3";
  }
  onOpen() {
    const { contentEl } = this;
    let title = "Competitor Overview through Tracxn";
    contentEl.createEl("h2", { text: title });
    contentEl.createEl("h5", {
      text: "IPO and Acquisition are mutually exclusive",
    });
    let query = new import_obsidian2.Setting(contentEl)
      .setName("Company Domain")
      .setDesc("e.g: tracxn.com. Do not add http://")
      .addText((text) =>
        text.onChange((value) => {
          this.company = value;
        })
      );
    let ipo = new import_obsidian2.Setting(contentEl)
      .setName("IPOed competitors?")
      .addToggle((component) => {
        component.onChange((value) => {
          this.isIPO = value;
        });
      });
    let acquired = new import_obsidian2.Setting(contentEl)
      .setName("Acquired competitors?")
      .addToggle((component) => {
        component.onChange((value) => {
          this.isAcquired = value;
        });
      });
    new import_obsidian2.Setting(contentEl)
      .setName("Number of companies per request")
      .addText((text) =>
        text.onChange((value) => (this.companies_per_request = value))
      );
    let button = new import_obsidian2.Setting(contentEl).addButton((btn) => {
      btn
        .setButtonText("Submit")
        .setCta()
        .onClick(() => {
          this.close();
          this.onsubmit(
            this.company +
              ", " +
              this.isIPO +
              ", " +
              this.isAcquired +
              ", " +
              this.companies_per_request
          );
        });
    });
  }
};

// node_modules/openai/version.mjs
var VERSION = "4.20.0";

// node_modules/openai/_shims/registry.mjs
var auto = false;
var kind = void 0;
var fetch2 = void 0;
var Request2 = void 0;
var Response2 = void 0;
var Headers2 = void 0;
var FormData2 = void 0;
var Blob2 = void 0;
var File2 = void 0;
var ReadableStream2 = void 0;
var getMultipartRequestOptions = void 0;
var getDefaultAgent = void 0;
var fileFromPath = void 0;
var isFsReadStream = void 0;
function setShims(shims, options = { auto: false }) {
  if (auto) {
    throw new Error(
      `you must \`import 'openai/shims/${shims.kind}'\` before importing anything else from openai`
    );
  }
  if (kind) {
    throw new Error(
      `can't \`import 'openai/shims/${shims.kind}'\` after \`import 'openai/shims/${kind}'\``
    );
  }
  auto = options.auto;
  kind = shims.kind;
  fetch2 = shims.fetch;
  Request2 = shims.Request;
  Response2 = shims.Response;
  Headers2 = shims.Headers;
  FormData2 = shims.FormData;
  Blob2 = shims.Blob;
  File2 = shims.File;
  ReadableStream2 = shims.ReadableStream;
  getMultipartRequestOptions = shims.getMultipartRequestOptions;
  getDefaultAgent = shims.getDefaultAgent;
  fileFromPath = shims.fileFromPath;
  isFsReadStream = shims.isFsReadStream;
}

// node_modules/openai/_shims/MultipartBody.mjs
var MultipartBody = class {
  constructor(body) {
    this.body = body;
  }
  get [Symbol.toStringTag]() {
    return "MultipartBody";
  }
};

// node_modules/openai/_shims/web-runtime.mjs
function getRuntime({ manuallyImported } = {}) {
  const recommendation = manuallyImported
    ? `You may need to use polyfills`
    : `Add one of these imports before your first \`import \u2026 from 'openai'\`:
- \`import 'openai/shims/node'\` (if you're running on Node)
- \`import 'openai/shims/web'\` (otherwise)
`;
  let _fetch, _Request, _Response, _Headers;
  try {
    _fetch = fetch;
    _Request = Request;
    _Response = Response;
    _Headers = Headers;
  } catch (error) {
    throw new Error(
      `this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`
    );
  }
  return {
    kind: "web",
    fetch: _fetch,
    Request: _Request,
    Response: _Response,
    Headers: _Headers,
    FormData:
      typeof FormData !== "undefined"
        ? FormData
        : class FormData {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`
              );
            }
          },
    Blob:
      typeof Blob !== "undefined"
        ? Blob
        : class Blob {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`
              );
            }
          },
    File:
      typeof File !== "undefined"
        ? File
        : class File {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`
              );
            }
          },
    ReadableStream:
      typeof ReadableStream !== "undefined"
        ? ReadableStream
        : class ReadableStream {
            constructor() {
              throw new Error(
                `streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`
              );
            }
          },
    getMultipartRequestOptions: async (form, opts) => ({
      ...opts,
      body: new MultipartBody(form),
    }),
    getDefaultAgent: (url) => void 0,
    fileFromPath: () => {
      throw new Error(
        "The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads"
      );
    },
    isFsReadStream: (value) => false,
  };
}

// node_modules/openai/_shims/index.mjs
if (!kind) setShims(getRuntime(), { auto: true });

// node_modules/openai/error.mjs
var error_exports = {};
__export(error_exports, {
  APIConnectionError: () => APIConnectionError,
  APIConnectionTimeoutError: () => APIConnectionTimeoutError,
  APIError: () => APIError,
  APIUserAbortError: () => APIUserAbortError,
  AuthenticationError: () => AuthenticationError,
  BadRequestError: () => BadRequestError,
  ConflictError: () => ConflictError,
  InternalServerError: () => InternalServerError,
  NotFoundError: () => NotFoundError,
  OpenAIError: () => OpenAIError,
  PermissionDeniedError: () => PermissionDeniedError,
  RateLimitError: () => RateLimitError,
  UnprocessableEntityError: () => UnprocessableEntityError,
});
var OpenAIError = class extends Error {};
var APIError = class extends OpenAIError {
  constructor(status, error, message, headers) {
    super(`${APIError.makeMessage(status, error, message)}`);
    this.status = status;
    this.headers = headers;
    const data = error;
    this.error = data;
    this.code = data == null ? void 0 : data["code"];
    this.param = data == null ? void 0 : data["param"];
    this.type = data == null ? void 0 : data["type"];
  }
  static makeMessage(status, error, message) {
    const msg = (error == null ? void 0 : error.message)
      ? typeof error.message === "string"
        ? error.message
        : JSON.stringify(error.message)
      : error
      ? JSON.stringify(error)
      : message;
    if (status && msg) {
      return `${status} ${msg}`;
    }
    if (status) {
      return `${status} status code (no body)`;
    }
    if (msg) {
      return msg;
    }
    return "(no status code or body)";
  }
  static generate(status, errorResponse, message, headers) {
    if (!status) {
      return new APIConnectionError({ cause: castToError(errorResponse) });
    }
    const error = errorResponse == null ? void 0 : errorResponse["error"];
    if (status === 400) {
      return new BadRequestError(status, error, message, headers);
    }
    if (status === 401) {
      return new AuthenticationError(status, error, message, headers);
    }
    if (status === 403) {
      return new PermissionDeniedError(status, error, message, headers);
    }
    if (status === 404) {
      return new NotFoundError(status, error, message, headers);
    }
    if (status === 409) {
      return new ConflictError(status, error, message, headers);
    }
    if (status === 422) {
      return new UnprocessableEntityError(status, error, message, headers);
    }
    if (status === 429) {
      return new RateLimitError(status, error, message, headers);
    }
    if (status >= 500) {
      return new InternalServerError(status, error, message, headers);
    }
    return new APIError(status, error, message, headers);
  }
};
var APIUserAbortError = class extends APIError {
  constructor({ message } = {}) {
    super(void 0, void 0, message || "Request was aborted.", void 0);
    this.status = void 0;
  }
};
var APIConnectionError = class extends APIError {
  constructor({ message, cause }) {
    super(void 0, void 0, message || "Connection error.", void 0);
    this.status = void 0;
    if (cause) this.cause = cause;
  }
};
var APIConnectionTimeoutError = class extends APIConnectionError {
  constructor({ message } = {}) {
    super({ message: message != null ? message : "Request timed out." });
  }
};
var BadRequestError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 400;
  }
};
var AuthenticationError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 401;
  }
};
var PermissionDeniedError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 403;
  }
};
var NotFoundError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 404;
  }
};
var ConflictError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 409;
  }
};
var UnprocessableEntityError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 422;
  }
};
var RateLimitError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 429;
  }
};
var InternalServerError = class extends APIError {};

// node_modules/openai/streaming.mjs
var Stream = class {
  constructor(iterator, controller) {
    this.iterator = iterator;
    this.controller = controller;
  }
  static fromSSEResponse(response, controller) {
    let consumed = false;
    const decoder = new SSEDecoder();
    async function* iterMessages() {
      if (!response.body) {
        controller.abort();
        throw new OpenAIError(
          `Attempted to iterate over a response with no body`
        );
      }
      const lineDecoder = new LineDecoder();
      const iter = readableStreamAsyncIterable(response.body);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          const sse = decoder.decode(line);
          if (sse) yield sse;
        }
      }
      for (const line of lineDecoder.flush()) {
        const sse = decoder.decode(line);
        if (sse) yield sse;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error(
          "Cannot iterate over a consumed stream, use `.tee()` to split the stream."
        );
      }
      consumed = true;
      let done = false;
      try {
        for await (const sse of iterMessages()) {
          if (done) continue;
          if (sse.data.startsWith("[DONE]")) {
            done = true;
            continue;
          }
          if (sse.event === null) {
            let data;
            try {
              data = JSON.parse(sse.data);
            } catch (e) {
              console.error(`Could not parse message into JSON:`, sse.data);
              console.error(`From chunk:`, sse.raw);
              throw e;
            }
            if (data && data.error) {
              throw new APIError(void 0, data.error, void 0, void 0);
            }
            yield data;
          }
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError") return;
        throw e;
      } finally {
        if (!done) controller.abort();
      }
    }
    return new Stream(iterator, controller);
  }
  static fromReadableStream(readableStream, controller) {
    let consumed = false;
    async function* iterLines() {
      const lineDecoder = new LineDecoder();
      const iter = readableStreamAsyncIterable(readableStream);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          yield line;
        }
      }
      for (const line of lineDecoder.flush()) {
        yield line;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error(
          "Cannot iterate over a consumed stream, use `.tee()` to split the stream."
        );
      }
      consumed = true;
      let done = false;
      try {
        for await (const line of iterLines()) {
          if (done) continue;
          if (line) yield JSON.parse(line);
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError") return;
        throw e;
      } finally {
        if (!done) controller.abort();
      }
    }
    return new Stream(iterator, controller);
  }
  [Symbol.asyncIterator]() {
    return this.iterator();
  }
  tee() {
    const left = [];
    const right = [];
    const iterator = this.iterator();
    const teeIterator = (queue) => {
      return {
        next: () => {
          if (queue.length === 0) {
            const result = iterator.next();
            left.push(result);
            right.push(result);
          }
          return queue.shift();
        },
      };
    };
    return [
      new Stream(() => teeIterator(left), this.controller),
      new Stream(() => teeIterator(right), this.controller),
    ];
  }
  toReadableStream() {
    const self = this;
    let iter;
    const encoder = new TextEncoder();
    return new ReadableStream2({
      async start() {
        iter = self[Symbol.asyncIterator]();
      },
      async pull(ctrl) {
        try {
          const { value, done } = await iter.next();
          if (done) return ctrl.close();
          const bytes = encoder.encode(JSON.stringify(value) + "\n");
          ctrl.enqueue(bytes);
        } catch (err) {
          ctrl.error(err);
        }
      },
      async cancel() {
        var _a3;
        await ((_a3 = iter.return) == null ? void 0 : _a3.call(iter));
      },
    });
  }
};
var SSEDecoder = class {
  constructor() {
    this.event = null;
    this.data = [];
    this.chunks = [];
  }
  decode(line) {
    if (line.endsWith("\r")) {
      line = line.substring(0, line.length - 1);
    }
    if (!line) {
      if (!this.event && !this.data.length) return null;
      const sse = {
        event: this.event,
        data: this.data.join("\n"),
        raw: this.chunks,
      };
      this.event = null;
      this.data = [];
      this.chunks = [];
      return sse;
    }
    this.chunks.push(line);
    if (line.startsWith(":")) {
      return null;
    }
    let [fieldname, _, value] = partition(line, ":");
    if (value.startsWith(" ")) {
      value = value.substring(1);
    }
    if (fieldname === "event") {
      this.event = value;
    } else if (fieldname === "data") {
      this.data.push(value);
    }
    return null;
  }
};
var LineDecoder = class {
  constructor() {
    this.buffer = [];
    this.trailingCR = false;
  }
  decode(chunk) {
    let text = this.decodeText(chunk);
    if (this.trailingCR) {
      text = "\r" + text;
      this.trailingCR = false;
    }
    if (text.endsWith("\r")) {
      this.trailingCR = true;
      text = text.slice(0, -1);
    }
    if (!text) {
      return [];
    }
    const trailingNewline = LineDecoder.NEWLINE_CHARS.has(
      text[text.length - 1] || ""
    );
    let lines = text.split(LineDecoder.NEWLINE_REGEXP);
    if (lines.length === 1 && !trailingNewline) {
      this.buffer.push(lines[0]);
      return [];
    }
    if (this.buffer.length > 0) {
      lines = [this.buffer.join("") + lines[0], ...lines.slice(1)];
      this.buffer = [];
    }
    if (!trailingNewline) {
      this.buffer = [lines.pop() || ""];
    }
    return lines;
  }
  decodeText(bytes) {
    var _a3;
    if (bytes == null) return "";
    if (typeof bytes === "string") return bytes;
    if (typeof Buffer !== "undefined") {
      if (bytes instanceof Buffer) {
        return bytes.toString();
      }
      if (bytes instanceof Uint8Array) {
        return Buffer.from(bytes).toString();
      }
      throw new OpenAIError(
        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`
      );
    }
    if (typeof TextDecoder !== "undefined") {
      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
        (_a3 = this.textDecoder) != null
          ? _a3
          : (this.textDecoder = new TextDecoder("utf8"));
        return this.textDecoder.decode(bytes);
      }
      throw new OpenAIError(
        `Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`
      );
    }
    throw new OpenAIError(
      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`
    );
  }
  flush() {
    if (!this.buffer.length && !this.trailingCR) {
      return [];
    }
    const lines = [this.buffer.join("")];
    this.buffer = [];
    this.trailingCR = false;
    return lines;
  }
};
LineDecoder.NEWLINE_CHARS = /* @__PURE__ */ new Set([
  "\n",
  "\r",
  "\v",
  "\f",
  "",
  "",
  "",
  "\x85",
  "\u2028",
  "\u2029",
]);
LineDecoder.NEWLINE_REGEXP = /\r\n|[\n\r\x0b\x0c\x1c\x1d\x1e\x85\u2028\u2029]/g;
function partition(str2, delimiter) {
  const index = str2.indexOf(delimiter);
  if (index !== -1) {
    return [
      str2.substring(0, index),
      delimiter,
      str2.substring(index + delimiter.length),
    ];
  }
  return [str2, "", ""];
}
function readableStreamAsyncIterable(stream) {
  if (stream[Symbol.asyncIterator]) return stream;
  const reader = stream.getReader();
  return {
    async next() {
      try {
        const result = await reader.read();
        if (result == null ? void 0 : result.done) reader.releaseLock();
        return result;
      } catch (e) {
        reader.releaseLock();
        throw e;
      }
    },
    async return() {
      const cancelPromise = reader.cancel();
      reader.releaseLock();
      await cancelPromise;
      return { done: true, value: void 0 };
    },
    [Symbol.asyncIterator]() {
      return this;
    },
  };
}

// node_modules/openai/uploads.mjs
var isResponseLike = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.url === "string" &&
  typeof value.blob === "function";
var isFileLike = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.name === "string" &&
  typeof value.lastModified === "number" &&
  isBlobLike(value);
var isBlobLike = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.size === "number" &&
  typeof value.type === "string" &&
  typeof value.text === "function" &&
  typeof value.slice === "function" &&
  typeof value.arrayBuffer === "function";
var isUploadable = (value) => {
  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);
};
async function toFile(value, name, options = {}) {
  var _a3, _b, _c;
  value = await value;
  if (isResponseLike(value)) {
    const blob = await value.blob();
    name ||
      (name =
        (_a3 = new URL(value.url).pathname.split(/[\\/]/).pop()) != null
          ? _a3
          : "unknown_file");
    return new File2([blob], name, options);
  }
  const bits = await getBytes(value);
  name || (name = (_b = getName(value)) != null ? _b : "unknown_file");
  if (!options.type) {
    const type = (_c = bits[0]) == null ? void 0 : _c.type;
    if (typeof type === "string") {
      options = { ...options, type };
    }
  }
  return new File2(bits, name, options);
}
async function getBytes(value) {
  var _a3;
  let parts = [];
  if (
    typeof value === "string" ||
    ArrayBuffer.isView(value) ||
    value instanceof ArrayBuffer
  ) {
    parts.push(value);
  } else if (isBlobLike(value)) {
    parts.push(await value.arrayBuffer());
  } else if (isAsyncIterableIterator(value)) {
    for await (const chunk of value) {
      parts.push(chunk);
    }
  } else {
    throw new Error(
      `Unexpected data type: ${typeof value}; constructor: ${
        (_a3 = value == null ? void 0 : value.constructor) == null
          ? void 0
          : _a3.name
      }; props: ${propsForError(value)}`
    );
  }
  return parts;
}
function propsForError(value) {
  const props = Object.getOwnPropertyNames(value);
  return `[${props.map((p) => `"${p}"`).join(", ")}]`;
}
function getName(value) {
  var _a3;
  return (
    getStringFromMaybeBuffer(value.name) ||
    getStringFromMaybeBuffer(value.filename) ||
    ((_a3 = getStringFromMaybeBuffer(value.path)) == null
      ? void 0
      : _a3.split(/[\\/]/).pop())
  );
}
var getStringFromMaybeBuffer = (x) => {
  if (typeof x === "string") return x;
  if (typeof Buffer !== "undefined" && x instanceof Buffer) return String(x);
  return void 0;
};
var isAsyncIterableIterator = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value[Symbol.asyncIterator] === "function";
var isMultipartBody = (body) =>
  body &&
  typeof body === "object" &&
  body.body &&
  body[Symbol.toStringTag] === "MultipartBody";
var multipartFormRequestOptions = async (opts) => {
  const form = await createForm(opts.body);
  return getMultipartRequestOptions(form, opts);
};
var createForm = async (body) => {
  const form = new FormData2();
  await Promise.all(
    Object.entries(body || {}).map(([key, value]) =>
      addFormValue(form, key, value)
    )
  );
  return form;
};
var addFormValue = async (form, key, value) => {
  if (value === void 0) return;
  if (value == null) {
    throw new TypeError(
      `Received null for "${key}"; to pass null in FormData, you must use the string 'null'`
    );
  }
  if (
    typeof value === "string" ||
    typeof value === "number" ||
    typeof value === "boolean"
  ) {
    form.append(key, String(value));
  } else if (isUploadable(value)) {
    const file = await toFile(value);
    form.append(key, file);
  } else if (Array.isArray(value)) {
    await Promise.all(
      value.map((entry) => addFormValue(form, key + "[]", entry))
    );
  } else if (typeof value === "object") {
    await Promise.all(
      Object.entries(value).map(([name, prop]) =>
        addFormValue(form, `${key}[${name}]`, prop)
      )
    );
  } else {
    throw new TypeError(
      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`
    );
  }
};

// node_modules/openai/core.mjs
var __classPrivateFieldSet = function (receiver, state, value, kind3, f) {
  if (kind3 === "m") throw new TypeError("Private method is not writable");
  if (kind3 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot write private member to an object whose class did not declare it"
    );
  return (
    kind3 === "a"
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
};
var __classPrivateFieldGet = function (receiver, state, kind3, f) {
  if (kind3 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot read private member from an object whose class did not declare it"
    );
  return kind3 === "m"
    ? f
    : kind3 === "a"
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
};
var _AbstractPage_client;
async function defaultParseResponse(props) {
  const { response } = props;
  if (props.options.stream) {
    debug(
      "response",
      response.status,
      response.url,
      response.headers,
      response.body
    );
    return Stream.fromSSEResponse(response, props.controller);
  }
  if (response.status === 204) {
    return null;
  }
  if (props.options.__binaryResponse) {
    return response;
  }
  const contentType = response.headers.get("content-type");
  if (contentType == null ? void 0 : contentType.includes("application/json")) {
    const json = await response.json();
    debug("response", response.status, response.url, response.headers, json);
    return json;
  }
  const text = await response.text();
  debug("response", response.status, response.url, response.headers, text);
  return text;
}
var APIPromise = class extends Promise {
  constructor(responsePromise, parseResponse = defaultParseResponse) {
    super((resolve) => {
      resolve(null);
    });
    this.responsePromise = responsePromise;
    this.parseResponse = parseResponse;
  }
  _thenUnwrap(transform) {
    return new APIPromise(this.responsePromise, async (props) =>
      transform(await this.parseResponse(props))
    );
  }
  asResponse() {
    return this.responsePromise.then((p) => p.response);
  }
  async withResponse() {
    const [data, response] = await Promise.all([
      this.parse(),
      this.asResponse(),
    ]);
    return { data, response };
  }
  parse() {
    if (!this.parsedPromise) {
      this.parsedPromise = this.responsePromise.then(this.parseResponse);
    }
    return this.parsedPromise;
  }
  then(onfulfilled, onrejected) {
    return this.parse().then(onfulfilled, onrejected);
  }
  catch(onrejected) {
    return this.parse().catch(onrejected);
  }
  finally(onfinally) {
    return this.parse().finally(onfinally);
  }
};
var APIClient = class {
  constructor({
    baseURL,
    maxRetries = 2,
    timeout = 6e5,
    httpAgent,
    fetch: overridenFetch,
  }) {
    this.baseURL = baseURL;
    this.maxRetries = validatePositiveInteger("maxRetries", maxRetries);
    this.timeout = validatePositiveInteger("timeout", timeout);
    this.httpAgent = httpAgent;
    this.fetch = overridenFetch != null ? overridenFetch : fetch2;
  }
  authHeaders(opts) {
    return {};
  }
  defaultHeaders(opts) {
    return {
      Accept: "application/json",
      "Content-Type": "application/json",
      "User-Agent": this.getUserAgent(),
      ...getPlatformHeaders(),
      ...this.authHeaders(opts),
    };
  }
  validateHeaders(headers, customHeaders) {}
  defaultIdempotencyKey() {
    return `stainless-node-retry-${uuid4()}`;
  }
  get(path, opts) {
    return this.methodRequest("get", path, opts);
  }
  post(path, opts) {
    return this.methodRequest("post", path, opts);
  }
  patch(path, opts) {
    return this.methodRequest("patch", path, opts);
  }
  put(path, opts) {
    return this.methodRequest("put", path, opts);
  }
  delete(path, opts) {
    return this.methodRequest("delete", path, opts);
  }
  methodRequest(method, path, opts) {
    return this.request(
      Promise.resolve(opts).then((opts2) => ({ method, path, ...opts2 }))
    );
  }
  getAPIList(path, Page2, opts) {
    return this.requestAPIList(Page2, { method: "get", path, ...opts });
  }
  calculateContentLength(body) {
    if (typeof body === "string") {
      if (typeof Buffer !== "undefined") {
        return Buffer.byteLength(body, "utf8").toString();
      }
      if (typeof TextEncoder !== "undefined") {
        const encoder = new TextEncoder();
        const encoded = encoder.encode(body);
        return encoded.length.toString();
      }
    }
    return null;
  }
  buildRequest(options) {
    var _a3, _b, _c, _d, _e, _f;
    const { method, path, query, headers = {} } = options;
    const body = isMultipartBody(options.body)
      ? options.body.body
      : options.body
      ? JSON.stringify(options.body, null, 2)
      : null;
    const contentLength = this.calculateContentLength(body);
    const url = this.buildURL(path, query);
    if ("timeout" in options)
      validatePositiveInteger("timeout", options.timeout);
    const timeout = (_a3 = options.timeout) != null ? _a3 : this.timeout;
    const httpAgent =
      (_c = (_b = options.httpAgent) != null ? _b : this.httpAgent) != null
        ? _c
        : getDefaultAgent(url);
    const minAgentTimeout = timeout + 1e3;
    if (
      typeof ((_d = httpAgent == null ? void 0 : httpAgent.options) == null
        ? void 0
        : _d.timeout) === "number" &&
      minAgentTimeout > ((_e = httpAgent.options.timeout) != null ? _e : 0)
    ) {
      httpAgent.options.timeout = minAgentTimeout;
    }
    if (this.idempotencyHeader && method !== "get") {
      if (!options.idempotencyKey)
        options.idempotencyKey = this.defaultIdempotencyKey();
      headers[this.idempotencyHeader] = options.idempotencyKey;
    }
    const reqHeaders = {
      ...(contentLength && { "Content-Length": contentLength }),
      ...this.defaultHeaders(options),
      ...headers,
    };
    if (isMultipartBody(options.body) && kind !== "node") {
      delete reqHeaders["Content-Type"];
    }
    Object.keys(reqHeaders).forEach(
      (key) => reqHeaders[key] === null && delete reqHeaders[key]
    );
    const req = {
      method,
      ...(body && { body }),
      headers: reqHeaders,
      ...(httpAgent && { agent: httpAgent }),
      signal: (_f = options.signal) != null ? _f : null,
    };
    this.validateHeaders(reqHeaders, headers);
    return { req, url, timeout };
  }
  async prepareRequest(request4, { url, options }) {}
  parseHeaders(headers) {
    return !headers
      ? {}
      : Symbol.iterator in headers
      ? Object.fromEntries(Array.from(headers).map((header) => [...header]))
      : { ...headers };
  }
  makeStatusError(status, error, message, headers) {
    return APIError.generate(status, error, message, headers);
  }
  request(options, remainingRetries = null) {
    return new APIPromise(this.makeRequest(options, remainingRetries));
  }
  async makeRequest(optionsInput, retriesRemaining) {
    var _a3, _b, _c;
    const options = await optionsInput;
    if (retriesRemaining == null) {
      retriesRemaining =
        (_a3 = options.maxRetries) != null ? _a3 : this.maxRetries;
    }
    const { req, url, timeout } = this.buildRequest(options);
    await this.prepareRequest(req, { url, options });
    debug("request", url, options, req.headers);
    if ((_b = options.signal) == null ? void 0 : _b.aborted) {
      throw new APIUserAbortError();
    }
    const controller = new AbortController();
    const response = await this.fetchWithTimeout(
      url,
      req,
      timeout,
      controller
    ).catch(castToError);
    if (response instanceof Error) {
      if ((_c = options.signal) == null ? void 0 : _c.aborted) {
        throw new APIUserAbortError();
      }
      if (retriesRemaining) {
        return this.retryRequest(options, retriesRemaining);
      }
      if (response.name === "AbortError") {
        throw new APIConnectionTimeoutError();
      }
      throw new APIConnectionError({ cause: response });
    }
    const responseHeaders = createResponseHeaders(response.headers);
    if (!response.ok) {
      if (retriesRemaining && this.shouldRetry(response)) {
        return this.retryRequest(options, retriesRemaining, responseHeaders);
      }
      const errText = await response
        .text()
        .catch((e) => castToError(e).message);
      const errJSON = safeJSON(errText);
      const errMessage = errJSON ? void 0 : errText;
      debug("response", response.status, url, responseHeaders, errMessage);
      const err = this.makeStatusError(
        response.status,
        errJSON,
        errMessage,
        responseHeaders
      );
      throw err;
    }
    return { response, options, controller };
  }
  requestAPIList(Page2, options) {
    const request4 = this.makeRequest(options, null);
    return new PagePromise(this, request4, Page2);
  }
  buildURL(path, query) {
    const url = isAbsoluteURL(path)
      ? new URL(path)
      : new URL(
          this.baseURL +
            (this.baseURL.endsWith("/") && path.startsWith("/")
              ? path.slice(1)
              : path)
        );
    const defaultQuery = this.defaultQuery();
    if (!isEmptyObj(defaultQuery)) {
      query = { ...defaultQuery, ...query };
    }
    if (query) {
      url.search = this.stringifyQuery(query);
    }
    return url.toString();
  }
  stringifyQuery(query) {
    return Object.entries(query)
      .filter(([_, value]) => typeof value !== "undefined")
      .map(([key, value]) => {
        if (
          typeof value === "string" ||
          typeof value === "number" ||
          typeof value === "boolean"
        ) {
          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
        }
        if (value === null) {
          return `${encodeURIComponent(key)}=`;
        }
        throw new OpenAIError(
          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`
        );
      })
      .join("&");
  }
  async fetchWithTimeout(url, init, ms, controller) {
    const { signal, ...options } = init || {};
    if (signal) signal.addEventListener("abort", () => controller.abort());
    const timeout = setTimeout(() => controller.abort(), ms);
    return this.getRequestClient()
      .fetch.call(void 0, url, { signal: controller.signal, ...options })
      .finally(() => {
        clearTimeout(timeout);
      });
  }
  getRequestClient() {
    return { fetch: this.fetch };
  }
  shouldRetry(response) {
    const shouldRetryHeader = response.headers.get("x-should-retry");
    if (shouldRetryHeader === "true") return true;
    if (shouldRetryHeader === "false") return false;
    if (response.status === 408) return true;
    if (response.status === 409) return true;
    if (response.status === 429) return true;
    if (response.status >= 500) return true;
    return false;
  }
  async retryRequest(options, retriesRemaining, responseHeaders) {
    var _a3;
    let timeoutMillis;
    const retryAfterHeader =
      responseHeaders == null ? void 0 : responseHeaders["retry-after"];
    if (retryAfterHeader) {
      const timeoutSeconds = parseInt(retryAfterHeader);
      if (!Number.isNaN(timeoutSeconds)) {
        timeoutMillis = timeoutSeconds * 1e3;
      } else {
        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();
      }
    }
    if (
      !timeoutMillis ||
      !Number.isInteger(timeoutMillis) ||
      timeoutMillis <= 0 ||
      timeoutMillis > 60 * 1e3
    ) {
      const maxRetries =
        (_a3 = options.maxRetries) != null ? _a3 : this.maxRetries;
      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(
        retriesRemaining,
        maxRetries
      );
    }
    await sleep(timeoutMillis);
    return this.makeRequest(options, retriesRemaining - 1);
  }
  calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {
    const initialRetryDelay = 0.5;
    const maxRetryDelay = 8;
    const numRetries = maxRetries - retriesRemaining;
    const sleepSeconds = Math.min(
      initialRetryDelay * Math.pow(2, numRetries),
      maxRetryDelay
    );
    const jitter = 1 - Math.random() * 0.25;
    return sleepSeconds * jitter * 1e3;
  }
  getUserAgent() {
    return `${this.constructor.name}/JS ${VERSION}`;
  }
};
var AbstractPage = class {
  constructor(client, response, body, options) {
    _AbstractPage_client.set(this, void 0);
    __classPrivateFieldSet(this, _AbstractPage_client, client, "f");
    this.options = options;
    this.response = response;
    this.body = body;
  }
  hasNextPage() {
    const items = this.getPaginatedItems();
    if (!items.length) return false;
    return this.nextPageInfo() != null;
  }
  async getNextPage() {
    const nextInfo = this.nextPageInfo();
    if (!nextInfo) {
      throw new OpenAIError(
        "No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`."
      );
    }
    const nextOptions = { ...this.options };
    if ("params" in nextInfo) {
      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };
    } else if ("url" in nextInfo) {
      const params = [
        ...Object.entries(nextOptions.query || {}),
        ...nextInfo.url.searchParams.entries(),
      ];
      for (const [key, value] of params) {
        nextInfo.url.searchParams.set(key, value);
      }
      nextOptions.query = void 0;
      nextOptions.path = nextInfo.url.toString();
    }
    return await __classPrivateFieldGet(
      this,
      _AbstractPage_client,
      "f"
    ).requestAPIList(this.constructor, nextOptions);
  }
  async *iterPages() {
    let page = this;
    yield page;
    while (page.hasNextPage()) {
      page = await page.getNextPage();
      yield page;
    }
  }
  async *[((_AbstractPage_client = /* @__PURE__ */ new WeakMap()),
  Symbol.asyncIterator)]() {
    for await (const page of this.iterPages()) {
      for (const item of page.getPaginatedItems()) {
        yield item;
      }
    }
  }
};
var PagePromise = class extends APIPromise {
  constructor(client, request4, Page2) {
    super(
      request4,
      async (props) =>
        new Page2(
          client,
          props.response,
          await defaultParseResponse(props),
          props.options
        )
    );
  }
  async *[Symbol.asyncIterator]() {
    const page = await this;
    for await (const item of page) {
      yield item;
    }
  }
};
var createResponseHeaders = (headers) => {
  return new Proxy(Object.fromEntries(headers.entries()), {
    get(target, name) {
      const key = name.toString();
      return target[key.toLowerCase()] || target[key];
    },
  });
};
var requestOptionsKeys = {
  method: true,
  path: true,
  query: true,
  body: true,
  headers: true,
  maxRetries: true,
  stream: true,
  timeout: true,
  httpAgent: true,
  signal: true,
  idempotencyKey: true,
  __binaryResponse: true,
};
var isRequestOptions = (obj) => {
  return (
    typeof obj === "object" &&
    obj !== null &&
    !isEmptyObj(obj) &&
    Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k))
  );
};
var getPlatformProperties = () => {
  if (typeof Deno !== "undefined" && Deno.build != null) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": normalizePlatform(Deno.build.os),
      "X-Stainless-Arch": normalizeArch(Deno.build.arch),
      "X-Stainless-Runtime": "deno",
      "X-Stainless-Runtime-Version": Deno.version,
    };
  }
  if (typeof EdgeRuntime !== "undefined") {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": `other:${EdgeRuntime}`,
      "X-Stainless-Runtime": "edge",
      "X-Stainless-Runtime-Version": process.version,
    };
  }
  if (
    Object.prototype.toString.call(
      typeof process !== "undefined" ? process : 0
    ) === "[object process]"
  ) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": normalizePlatform(process.platform),
      "X-Stainless-Arch": normalizeArch(process.arch),
      "X-Stainless-Runtime": "node",
      "X-Stainless-Runtime-Version": process.version,
    };
  }
  const browserInfo = getBrowserInfo();
  if (browserInfo) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": "unknown",
      "X-Stainless-Runtime": `browser:${browserInfo.browser}`,
      "X-Stainless-Runtime-Version": browserInfo.version,
    };
  }
  return {
    "X-Stainless-Lang": "js",
    "X-Stainless-Package-Version": VERSION,
    "X-Stainless-OS": "Unknown",
    "X-Stainless-Arch": "unknown",
    "X-Stainless-Runtime": "unknown",
    "X-Stainless-Runtime-Version": "unknown",
  };
};
function getBrowserInfo() {
  if (typeof navigator === "undefined" || !navigator) {
    return null;
  }
  const browserPatterns = [
    { key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    {
      key: "safari",
      pattern:
        /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/,
    },
  ];
  for (const { key, pattern } of browserPatterns) {
    const match = pattern.exec(navigator.userAgent);
    if (match) {
      const major = match[1] || 0;
      const minor = match[2] || 0;
      const patch = match[3] || 0;
      return { browser: key, version: `${major}.${minor}.${patch}` };
    }
  }
  return null;
}
var normalizeArch = (arch) => {
  if (arch === "x32") return "x32";
  if (arch === "x86_64" || arch === "x64") return "x64";
  if (arch === "arm") return "arm";
  if (arch === "aarch64" || arch === "arm64") return "arm64";
  if (arch) return `other:${arch}`;
  return "unknown";
};
var normalizePlatform = (platform) => {
  platform = platform.toLowerCase();
  if (platform.includes("ios")) return "iOS";
  if (platform === "android") return "Android";
  if (platform === "darwin") return "MacOS";
  if (platform === "win32") return "Windows";
  if (platform === "freebsd") return "FreeBSD";
  if (platform === "openbsd") return "OpenBSD";
  if (platform === "linux") return "Linux";
  if (platform) return `Other:${platform}`;
  return "Unknown";
};
var _platformHeaders;
var getPlatformHeaders = () => {
  return _platformHeaders != null
    ? _platformHeaders
    : (_platformHeaders = getPlatformProperties());
};
var safeJSON = (text) => {
  try {
    return JSON.parse(text);
  } catch (err) {
    return void 0;
  }
};
var startsWithSchemeRegexp = new RegExp("^(?:[a-z]+:)?//", "i");
var isAbsoluteURL = (url) => {
  return startsWithSchemeRegexp.test(url);
};
var sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
var validatePositiveInteger = (name, n) => {
  if (typeof n !== "number" || !Number.isInteger(n)) {
    throw new OpenAIError(`${name} must be an integer`);
  }
  if (n < 0) {
    throw new OpenAIError(`${name} must be a positive integer`);
  }
  return n;
};
var castToError = (err) => {
  if (err instanceof Error) return err;
  return new Error(err);
};
var readEnv = (env) => {
  var _a3, _b, _c, _d;
  if (typeof process !== "undefined") {
    return (_b = (_a3 = process.env) == null ? void 0 : _a3[env]) != null
      ? _b
      : void 0;
  }
  if (typeof Deno !== "undefined") {
    return (_d = (_c = Deno.env) == null ? void 0 : _c.get) == null
      ? void 0
      : _d.call(_c, env);
  }
  return void 0;
};
function isEmptyObj(obj) {
  if (!obj) return true;
  for (const _k in obj) return false;
  return true;
}
function hasOwn(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function debug(action, ...args) {
  if (typeof process !== "undefined" && process.env["DEBUG"] === "true") {
    console.log(`OpenAI:DEBUG:${action}`, ...args);
  }
}
var uuid4 = () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = (Math.random() * 16) | 0;
    const v = c === "x" ? r : (r & 3) | 8;
    return v.toString(16);
  });
};
var isRunningInBrowser = () => {
  return (
    typeof window !== "undefined" &&
    typeof window.document !== "undefined" &&
    typeof navigator !== "undefined"
  );
};

// node_modules/openai/pagination.mjs
var Page = class extends AbstractPage {
  constructor(client, response, body, options) {
    super(client, response, body, options);
    this.data = body.data;
    this.object = body.object;
  }
  getPaginatedItems() {
    return this.data;
  }
  nextPageParams() {
    return null;
  }
  nextPageInfo() {
    return null;
  }
};
var CursorPage = class extends AbstractPage {
  constructor(client, response, body, options) {
    super(client, response, body, options);
    this.data = body.data;
  }
  getPaginatedItems() {
    return this.data;
  }
  nextPageParams() {
    const info = this.nextPageInfo();
    if (!info) return null;
    if ("params" in info) return info.params;
    const params = Object.fromEntries(info.url.searchParams);
    if (!Object.keys(params).length) return null;
    return params;
  }
  nextPageInfo() {
    var _a3, _b;
    if (!((_a3 = this.data) == null ? void 0 : _a3.length)) {
      return null;
    }
    const next =
      (_b = this.data[this.data.length - 1]) == null ? void 0 : _b.id;
    if (!next) return null;
    return { params: { after: next } };
  }
};

// node_modules/openai/resource.mjs
var APIResource = class {
  constructor(client) {
    this._client = client;
  }
};

// node_modules/openai/resources/chat/completions.mjs
var Completions = class extends APIResource {
  create(body, options) {
    var _a3;
    return this._client.post("/chat/completions", {
      body,
      ...options,
      stream: (_a3 = body.stream) != null ? _a3 : false,
    });
  }
};
(function (Completions5) {})(Completions || (Completions = {}));

// node_modules/openai/resources/chat/chat.mjs
var Chat = class extends APIResource {
  constructor() {
    super(...arguments);
    this.completions = new Completions(this._client);
  }
};
(function (Chat4) {
  Chat4.Completions = Completions;
})(Chat || (Chat = {}));

// node_modules/openai/resources/audio/speech.mjs
var Speech = class extends APIResource {
  create(body, options) {
    return this._client.post("/audio/speech", {
      body,
      ...options,
      __binaryResponse: true,
    });
  }
};
(function (Speech2) {})(Speech || (Speech = {}));

// node_modules/openai/resources/audio/transcriptions.mjs
var Transcriptions = class extends APIResource {
  create(body, options) {
    return this._client.post(
      "/audio/transcriptions",
      multipartFormRequestOptions({ body, ...options })
    );
  }
};
(function (Transcriptions3) {})(Transcriptions || (Transcriptions = {}));

// node_modules/openai/resources/audio/translations.mjs
var Translations = class extends APIResource {
  create(body, options) {
    return this._client.post(
      "/audio/translations",
      multipartFormRequestOptions({ body, ...options })
    );
  }
};
(function (Translations3) {})(Translations || (Translations = {}));

// node_modules/openai/resources/audio/audio.mjs
var Audio = class extends APIResource {
  constructor() {
    super(...arguments);
    this.transcriptions = new Transcriptions(this._client);
    this.translations = new Translations(this._client);
    this.speech = new Speech(this._client);
  }
};
(function (Audio3) {
  Audio3.Transcriptions = Transcriptions;
  Audio3.Translations = Translations;
  Audio3.Speech = Speech;
})(Audio || (Audio = {}));

// node_modules/openai/resources/beta/assistants/files.mjs
var Files = class extends APIResource {
  create(assistantId, body, options) {
    return this._client.post(`/assistants/${assistantId}/files`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(assistantId, fileId, options) {
    return this._client.get(`/assistants/${assistantId}/files/${fileId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  list(assistantId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(assistantId, {}, query);
    }
    return this._client.getAPIList(
      `/assistants/${assistantId}/files`,
      AssistantFilesPage,
      {
        query,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
  del(assistantId, fileId, options) {
    return this._client.delete(`/assistants/${assistantId}/files/${fileId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
};
var AssistantFilesPage = class extends CursorPage {};
(function (Files4) {
  Files4.AssistantFilesPage = AssistantFilesPage;
})(Files || (Files = {}));

// node_modules/openai/resources/beta/assistants/assistants.mjs
var Assistants = class extends APIResource {
  constructor() {
    super(...arguments);
    this.files = new Files(this._client);
  }
  create(body, options) {
    return this._client.post("/assistants", {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(assistantId, options) {
    return this._client.get(`/assistants/${assistantId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  update(assistantId, body, options) {
    return this._client.post(`/assistants/${assistantId}`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/assistants", AssistantsPage, {
      query,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  del(assistantId, options) {
    return this._client.delete(`/assistants/${assistantId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
};
var AssistantsPage = class extends CursorPage {};
(function (Assistants2) {
  Assistants2.AssistantsPage = AssistantsPage;
  Assistants2.Files = Files;
  Assistants2.AssistantFilesPage = AssistantFilesPage;
})(Assistants || (Assistants = {}));

// node_modules/openai/lib/RunnableFunction.mjs
function isRunnableFunctionWithParse(fn) {
  return typeof fn.parse === "function";
}

// node_modules/openai/lib/chatCompletionUtils.mjs
var isAssistantMessage = (message) => {
  return (message == null ? void 0 : message.role) === "assistant";
};
var isFunctionMessage = (message) => {
  return (message == null ? void 0 : message.role) === "function";
};
var isToolMessage = (message) => {
  return (message == null ? void 0 : message.role) === "tool";
};

// node_modules/openai/lib/AbstractChatCompletionRunner.mjs
var __classPrivateFieldSet2 = function (receiver, state, value, kind3, f) {
  if (kind3 === "m") throw new TypeError("Private method is not writable");
  if (kind3 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot write private member to an object whose class did not declare it"
    );
  return (
    kind3 === "a"
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
};
var __classPrivateFieldGet2 = function (receiver, state, kind3, f) {
  if (kind3 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot read private member from an object whose class did not declare it"
    );
  return kind3 === "m"
    ? f
    : kind3 === "a"
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
};
var _AbstractChatCompletionRunner_instances;
var _AbstractChatCompletionRunner_connectedPromise;
var _AbstractChatCompletionRunner_resolveConnectedPromise;
var _AbstractChatCompletionRunner_rejectConnectedPromise;
var _AbstractChatCompletionRunner_endPromise;
var _AbstractChatCompletionRunner_resolveEndPromise;
var _AbstractChatCompletionRunner_rejectEndPromise;
var _AbstractChatCompletionRunner_listeners;
var _AbstractChatCompletionRunner_ended;
var _AbstractChatCompletionRunner_errored;
var _AbstractChatCompletionRunner_aborted;
var _AbstractChatCompletionRunner_catchingPromiseCreated;
var _AbstractChatCompletionRunner_getFinalContent;
var _AbstractChatCompletionRunner_getFinalMessage;
var _AbstractChatCompletionRunner_getFinalFunctionCall;
var _AbstractChatCompletionRunner_getFinalFunctionCallResult;
var _AbstractChatCompletionRunner_calculateTotalUsage;
var _AbstractChatCompletionRunner_handleError;
var _AbstractChatCompletionRunner_validateParams;
var _AbstractChatCompletionRunner_stringifyFunctionCallResult;
var DEFAULT_MAX_CHAT_COMPLETIONS = 10;
var AbstractChatCompletionRunner = class {
  constructor() {
    _AbstractChatCompletionRunner_instances.add(this);
    this.controller = new AbortController();
    _AbstractChatCompletionRunner_connectedPromise.set(this, void 0);
    _AbstractChatCompletionRunner_resolveConnectedPromise.set(this, () => {});
    _AbstractChatCompletionRunner_rejectConnectedPromise.set(this, () => {});
    _AbstractChatCompletionRunner_endPromise.set(this, void 0);
    _AbstractChatCompletionRunner_resolveEndPromise.set(this, () => {});
    _AbstractChatCompletionRunner_rejectEndPromise.set(this, () => {});
    _AbstractChatCompletionRunner_listeners.set(this, {});
    this._chatCompletions = [];
    this.messages = [];
    _AbstractChatCompletionRunner_ended.set(this, false);
    _AbstractChatCompletionRunner_errored.set(this, false);
    _AbstractChatCompletionRunner_aborted.set(this, false);
    _AbstractChatCompletionRunner_catchingPromiseCreated.set(this, false);
    _AbstractChatCompletionRunner_handleError.set(this, (error) => {
      __classPrivateFieldSet2(
        this,
        _AbstractChatCompletionRunner_errored,
        true,
        "f"
      );
      if (error instanceof Error && error.name === "AbortError") {
        error = new APIUserAbortError();
      }
      if (error instanceof APIUserAbortError) {
        __classPrivateFieldSet2(
          this,
          _AbstractChatCompletionRunner_aborted,
          true,
          "f"
        );
        return this._emit("abort", error);
      }
      if (error instanceof OpenAIError) {
        return this._emit("error", error);
      }
      if (error instanceof Error) {
        const openAIError = new OpenAIError(error.message);
        openAIError.cause = error;
        return this._emit("error", openAIError);
      }
      return this._emit("error", new OpenAIError(String(error)));
    });
    __classPrivateFieldSet2(
      this,
      _AbstractChatCompletionRunner_connectedPromise,
      new Promise((resolve, reject) => {
        __classPrivateFieldSet2(
          this,
          _AbstractChatCompletionRunner_resolveConnectedPromise,
          resolve,
          "f"
        );
        __classPrivateFieldSet2(
          this,
          _AbstractChatCompletionRunner_rejectConnectedPromise,
          reject,
          "f"
        );
      }),
      "f"
    );
    __classPrivateFieldSet2(
      this,
      _AbstractChatCompletionRunner_endPromise,
      new Promise((resolve, reject) => {
        __classPrivateFieldSet2(
          this,
          _AbstractChatCompletionRunner_resolveEndPromise,
          resolve,
          "f"
        );
        __classPrivateFieldSet2(
          this,
          _AbstractChatCompletionRunner_rejectEndPromise,
          reject,
          "f"
        );
      }),
      "f"
    );
    __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_connectedPromise,
      "f"
    ).catch(() => {});
    __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_endPromise,
      "f"
    ).catch(() => {});
  }
  _run(executor) {
    setTimeout(() => {
      executor().then(() => {
        this._emitFinal();
        this._emit("end");
      }, __classPrivateFieldGet2(this, _AbstractChatCompletionRunner_handleError, "f"));
    }, 0);
  }
  _addChatCompletion(chatCompletion) {
    var _a3;
    this._chatCompletions.push(chatCompletion);
    this._emit("chatCompletion", chatCompletion);
    const message =
      (_a3 = chatCompletion.choices[0]) == null ? void 0 : _a3.message;
    if (message) this._addMessage(message);
    return chatCompletion;
  }
  _addMessage(message, emit = true) {
    this.messages.push(message);
    if (emit) {
      this._emit("message", message);
      if (
        (isFunctionMessage(message) || isToolMessage(message)) &&
        message.content
      ) {
        this._emit("functionCallResult", message.content);
      } else if (isAssistantMessage(message) && message.function_call) {
        this._emit("functionCall", message.function_call);
      } else if (isAssistantMessage(message) && message.tool_calls) {
        for (const tool_call of message.tool_calls) {
          if (tool_call.type === "function") {
            this._emit("functionCall", tool_call.function);
          }
        }
      }
    }
  }
  _connected() {
    if (this.ended) return;
    __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_resolveConnectedPromise,
      "f"
    ).call(this);
    this._emit("connect");
  }
  get ended() {
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_ended,
      "f"
    );
  }
  get errored() {
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_errored,
      "f"
    );
  }
  get aborted() {
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_aborted,
      "f"
    );
  }
  abort() {
    this.controller.abort();
  }
  on(event, listener) {
    const listeners =
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_listeners,
        "f"
      )[event] ||
      (__classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_listeners,
        "f"
      )[event] = []);
    listeners.push({ listener });
    return this;
  }
  off(event, listener) {
    const listeners = __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_listeners,
      "f"
    )[event];
    if (!listeners) return this;
    const index = listeners.findIndex((l) => l.listener === listener);
    if (index >= 0) listeners.splice(index, 1);
    return this;
  }
  once(event, listener) {
    const listeners =
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_listeners,
        "f"
      )[event] ||
      (__classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_listeners,
        "f"
      )[event] = []);
    listeners.push({ listener, once: true });
    return this;
  }
  emitted(event) {
    return new Promise((resolve, reject) => {
      __classPrivateFieldSet2(
        this,
        _AbstractChatCompletionRunner_catchingPromiseCreated,
        true,
        "f"
      );
      if (event !== "error") this.once("error", reject);
      this.once(event, resolve);
    });
  }
  async done() {
    __classPrivateFieldSet2(
      this,
      _AbstractChatCompletionRunner_catchingPromiseCreated,
      true,
      "f"
    );
    await __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_endPromise,
      "f"
    );
  }
  async finalChatCompletion() {
    await this.done();
    const completion = this._chatCompletions[this._chatCompletions.length - 1];
    if (!completion)
      throw new OpenAIError("stream ended without producing a ChatCompletion");
    return completion;
  }
  async finalContent() {
    await this.done();
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalContent
    ).call(this);
  }
  async finalMessage() {
    await this.done();
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalMessage
    ).call(this);
  }
  async finalFunctionCall() {
    await this.done();
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalFunctionCall
    ).call(this);
  }
  async finalFunctionCallResult() {
    await this.done();
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalFunctionCallResult
    ).call(this);
  }
  async totalUsage() {
    await this.done();
    return __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_calculateTotalUsage
    ).call(this);
  }
  allChatCompletions() {
    return [...this._chatCompletions];
  }
  _emit(event, ...args) {
    if (__classPrivateFieldGet2(this, _AbstractChatCompletionRunner_ended, "f"))
      return;
    if (event === "end") {
      __classPrivateFieldSet2(
        this,
        _AbstractChatCompletionRunner_ended,
        true,
        "f"
      );
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_resolveEndPromise,
        "f"
      ).call(this);
    }
    const listeners = __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_listeners,
      "f"
    )[event];
    if (listeners) {
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_listeners,
        "f"
      )[event] = listeners.filter((l) => !l.once);
      listeners.forEach(({ listener }) => listener(...args));
    }
    if (event === "abort") {
      const error = args[0];
      if (
        !__classPrivateFieldGet2(
          this,
          _AbstractChatCompletionRunner_catchingPromiseCreated,
          "f"
        ) &&
        !(listeners == null ? void 0 : listeners.length)
      ) {
        Promise.reject(error);
      }
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_rejectConnectedPromise,
        "f"
      ).call(this, error);
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_rejectEndPromise,
        "f"
      ).call(this, error);
      this._emit("end");
      return;
    }
    if (event === "error") {
      const error = args[0];
      if (
        !__classPrivateFieldGet2(
          this,
          _AbstractChatCompletionRunner_catchingPromiseCreated,
          "f"
        ) &&
        !(listeners == null ? void 0 : listeners.length)
      ) {
        Promise.reject(error);
      }
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_rejectConnectedPromise,
        "f"
      ).call(this, error);
      __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_rejectEndPromise,
        "f"
      ).call(this, error);
      this._emit("end");
    }
  }
  _emitFinal() {
    const completion = this._chatCompletions[this._chatCompletions.length - 1];
    if (completion) this._emit("finalChatCompletion", completion);
    const finalMessage = this.messages[this.messages.length - 1];
    if (finalMessage) this._emit("finalMessage", finalMessage);
    const finalContent = __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalContent
    ).call(this);
    if (finalContent) this._emit("finalContent", finalContent);
    const finalFunctionCall = __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalFunctionCall
    ).call(this);
    if (finalFunctionCall) this._emit("finalFunctionCall", finalFunctionCall);
    const finalFunctionCallResult = __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_getFinalFunctionCallResult
    ).call(this);
    if (finalFunctionCallResult != null)
      this._emit("finalFunctionCallResult", finalFunctionCallResult);
    if (this._chatCompletions.some((c) => c.usage)) {
      this._emit(
        "totalUsage",
        __classPrivateFieldGet2(
          this,
          _AbstractChatCompletionRunner_instances,
          "m",
          _AbstractChatCompletionRunner_calculateTotalUsage
        ).call(this)
      );
    }
  }
  async _createChatCompletion(completions, params, options) {
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted) this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet2(
      this,
      _AbstractChatCompletionRunner_instances,
      "m",
      _AbstractChatCompletionRunner_validateParams
    ).call(this, params);
    const chatCompletion = await completions.create(
      { ...params, stream: false },
      { ...options, signal: this.controller.signal }
    );
    this._connected();
    return this._addChatCompletion(chatCompletion);
  }
  async _runChatCompletion(completions, params, options) {
    for (const message of params.messages) {
      this._addMessage(message, false);
    }
    return await this._createChatCompletion(completions, params, options);
  }
  async _runFunctions(completions, params, options) {
    var _a3;
    const role = "function";
    const { function_call = "auto", stream, ...restParams } = params;
    const singleFunctionToCall =
      typeof function_call !== "string" &&
      (function_call == null ? void 0 : function_call.name);
    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};
    const functionsByName = {};
    for (const f of params.functions) {
      functionsByName[f.name || f.function.name] = f;
    }
    const functions = params.functions.map((f) => ({
      name: f.name || f.function.name,
      parameters: f.parameters,
      description: f.description,
    }));
    for (const message of params.messages) {
      this._addMessage(message, false);
    }
    for (let i = 0; i < maxChatCompletions; ++i) {
      const chatCompletion = await this._createChatCompletion(
        completions,
        {
          ...restParams,
          function_call,
          functions,
          messages: [...this.messages],
        },
        options
      );
      const message =
        (_a3 = chatCompletion.choices[0]) == null ? void 0 : _a3.message;
      if (!message) {
        throw new OpenAIError(`missing message in ChatCompletion response`);
      }
      if (!message.function_call) return;
      const { name, arguments: args } = message.function_call;
      const fn = functionsByName[name];
      if (!fn) {
        const content2 = `Invalid function_call: ${JSON.stringify(
          name
        )}. Available options are: ${functions
          .map((f) => JSON.stringify(f.name))
          .join(", ")}. Please try again`;
        this._addMessage({ role, name, content: content2 });
        continue;
      } else if (singleFunctionToCall && singleFunctionToCall !== name) {
        const content2 = `Invalid function_call: ${JSON.stringify(
          name
        )}. ${JSON.stringify(
          singleFunctionToCall
        )} requested. Please try again`;
        this._addMessage({ role, name, content: content2 });
        continue;
      }
      let parsed;
      try {
        parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;
      } catch (error) {
        this._addMessage({
          role,
          name,
          content: error instanceof Error ? error.message : String(error),
        });
        continue;
      }
      const rawContent = await fn.function(parsed, this);
      const content = __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_instances,
        "m",
        _AbstractChatCompletionRunner_stringifyFunctionCallResult
      ).call(this, rawContent);
      this._addMessage({ role, name, content });
      if (singleFunctionToCall) return;
    }
  }
  async _runTools(completions, params, options) {
    var _a3, _b;
    const role = "tool";
    const { tool_choice = "auto", stream, ...restParams } = params;
    const singleFunctionToCall =
      typeof tool_choice !== "string" &&
      ((_a3 = tool_choice == null ? void 0 : tool_choice.function) == null
        ? void 0
        : _a3.name);
    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};
    const functionsByName = {};
    for (const f of params.tools) {
      if (f.type === "function") {
        functionsByName[f.function.name || f.function.function.name] =
          f.function;
      }
    }
    const tools =
      "tools" in params
        ? params.tools.map((t) =>
            t.type === "function"
              ? {
                  type: "function",
                  function: {
                    name: t.function.name || t.function.function.name,
                    parameters: t.function.parameters,
                    description: t.function.description,
                  },
                }
              : t
          )
        : void 0;
    for (const message of params.messages) {
      this._addMessage(message, false);
    }
    for (let i = 0; i < maxChatCompletions; ++i) {
      const chatCompletion = await this._createChatCompletion(
        completions,
        {
          ...restParams,
          tool_choice,
          tools,
          messages: [...this.messages],
        },
        options
      );
      const message =
        (_b = chatCompletion.choices[0]) == null ? void 0 : _b.message;
      if (!message) {
        throw new OpenAIError(`missing message in ChatCompletion response`);
      }
      if (!message.tool_calls) return;
      for (const tool_call of message.tool_calls) {
        if (tool_call.type !== "function") continue;
        const tool_call_id = tool_call.id;
        const { name, arguments: args } = tool_call.function;
        const fn = functionsByName[name];
        if (!fn) {
          const content2 = `Invalid tool_call: ${JSON.stringify(
            name
          )}. Available options are: ${tools
            .map((f) => JSON.stringify(f.function.name))
            .join(", ")}. Please try again`;
          this._addMessage({ role, tool_call_id, content: content2 });
          continue;
        } else if (singleFunctionToCall && singleFunctionToCall !== name) {
          const content2 = `Invalid tool_call: ${JSON.stringify(
            name
          )}. ${JSON.stringify(
            singleFunctionToCall
          )} requested. Please try again`;
          this._addMessage({ role, tool_call_id, content: content2 });
          continue;
        }
        let parsed;
        try {
          parsed = isRunnableFunctionWithParse(fn)
            ? await fn.parse(args)
            : args;
        } catch (error) {
          const content2 =
            error instanceof Error ? error.message : String(error);
          this._addMessage({ role, tool_call_id, content: content2 });
          continue;
        }
        const rawContent = await fn.function(parsed, this);
        const content = __classPrivateFieldGet2(
          this,
          _AbstractChatCompletionRunner_instances,
          "m",
          _AbstractChatCompletionRunner_stringifyFunctionCallResult
        ).call(this, rawContent);
        this._addMessage({ role, tool_call_id, content });
        if (singleFunctionToCall) return;
      }
    }
  }
};
(_AbstractChatCompletionRunner_connectedPromise =
  /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_resolveConnectedPromise =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_rejectConnectedPromise =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_endPromise = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_resolveEndPromise =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_rejectEndPromise =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_listeners = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_ended = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_errored = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_aborted = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_catchingPromiseCreated =
    /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_handleError = /* @__PURE__ */ new WeakMap()),
  (_AbstractChatCompletionRunner_instances = /* @__PURE__ */ new WeakSet()),
  (_AbstractChatCompletionRunner_getFinalContent =
    function _AbstractChatCompletionRunner_getFinalContent2() {
      return __classPrivateFieldGet2(
        this,
        _AbstractChatCompletionRunner_instances,
        "m",
        _AbstractChatCompletionRunner_getFinalMessage
      ).call(this).content;
    }),
  (_AbstractChatCompletionRunner_getFinalMessage =
    function _AbstractChatCompletionRunner_getFinalMessage2() {
      let i = this.messages.length;
      while (i-- > 0) {
        const message = this.messages[i];
        if (isAssistantMessage(message)) {
          return message;
        }
      }
      throw new OpenAIError(
        "stream ended without producing a ChatCompletionMessage with role=assistant"
      );
    }),
  (_AbstractChatCompletionRunner_getFinalFunctionCall =
    function _AbstractChatCompletionRunner_getFinalFunctionCall2() {
      for (let i = this.messages.length - 1; i >= 0; i--) {
        const message = this.messages[i];
        if (
          isAssistantMessage(message) &&
          (message == null ? void 0 : message.function_call)
        ) {
          return message.function_call;
        }
      }
      return;
    }),
  (_AbstractChatCompletionRunner_getFinalFunctionCallResult =
    function _AbstractChatCompletionRunner_getFinalFunctionCallResult2() {
      for (let i = this.messages.length - 1; i >= 0; i--) {
        const message = this.messages[i];
        if (isFunctionMessage(message) && message.content != null) {
          return message.content;
        }
      }
      return;
    }),
  (_AbstractChatCompletionRunner_calculateTotalUsage =
    function _AbstractChatCompletionRunner_calculateTotalUsage2() {
      const total = {
        completion_tokens: 0,
        prompt_tokens: 0,
        total_tokens: 0,
      };
      for (const { usage } of this._chatCompletions) {
        if (usage) {
          total.completion_tokens += usage.completion_tokens;
          total.prompt_tokens += usage.prompt_tokens;
          total.total_tokens += usage.total_tokens;
        }
      }
      return total;
    }),
  (_AbstractChatCompletionRunner_validateParams =
    function _AbstractChatCompletionRunner_validateParams2(params) {
      if (params.n != null && params.n > 1) {
        throw new OpenAIError(
          "ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly."
        );
      }
    }),
  (_AbstractChatCompletionRunner_stringifyFunctionCallResult =
    function _AbstractChatCompletionRunner_stringifyFunctionCallResult2(
      rawContent
    ) {
      return typeof rawContent === "string"
        ? rawContent
        : rawContent === void 0
        ? "undefined"
        : JSON.stringify(rawContent);
    });

// node_modules/openai/lib/ChatCompletionRunner.mjs
var ChatCompletionRunner = class extends AbstractChatCompletionRunner {
  static runFunctions(completions, params, options) {
    const runner = new ChatCompletionRunner();
    runner._run(() => runner._runFunctions(completions, params, options));
    return runner;
  }
  static runTools(completions, params, options) {
    const runner = new ChatCompletionRunner();
    runner._run(() => runner._runTools(completions, params, options));
    return runner;
  }
  _addMessage(message) {
    super._addMessage(message);
    if (isAssistantMessage(message) && message.content) {
      this._emit("content", message.content);
    }
  }
};

// node_modules/openai/lib/ChatCompletionStream.mjs
var __classPrivateFieldGet3 = function (receiver, state, kind3, f) {
  if (kind3 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot read private member from an object whose class did not declare it"
    );
  return kind3 === "m"
    ? f
    : kind3 === "a"
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
};
var __classPrivateFieldSet3 = function (receiver, state, value, kind3, f) {
  if (kind3 === "m") throw new TypeError("Private method is not writable");
  if (kind3 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot write private member to an object whose class did not declare it"
    );
  return (
    kind3 === "a"
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
};
var _ChatCompletionStream_instances;
var _ChatCompletionStream_currentChatCompletionSnapshot;
var _ChatCompletionStream_beginRequest;
var _ChatCompletionStream_addChunk;
var _ChatCompletionStream_endRequest;
var _ChatCompletionStream_accumulateChatCompletion;
var ChatCompletionStream = class extends AbstractChatCompletionRunner {
  constructor() {
    super(...arguments);
    _ChatCompletionStream_instances.add(this);
    _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);
  }
  get currentChatCompletionSnapshot() {
    return __classPrivateFieldGet3(
      this,
      _ChatCompletionStream_currentChatCompletionSnapshot,
      "f"
    );
  }
  static fromReadableStream(stream) {
    const runner = new ChatCompletionStream();
    runner._run(() => runner._fromReadableStream(stream));
    return runner;
  }
  static createChatCompletion(completions, params, options) {
    const runner = new ChatCompletionStream();
    runner._run(() =>
      runner._runChatCompletion(
        completions,
        { ...params, stream: true },
        {
          ...options,
          headers: {
            ...(options == null ? void 0 : options.headers),
            "X-Stainless-Helper-Method": "stream",
          },
        }
      )
    );
    return runner;
  }
  async _createChatCompletion(completions, params, options) {
    var _a3;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted) this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet3(
      this,
      _ChatCompletionStream_instances,
      "m",
      _ChatCompletionStream_beginRequest
    ).call(this);
    const stream = await completions.create(
      { ...params, stream: true },
      { ...options, signal: this.controller.signal }
    );
    this._connected();
    for await (const chunk of stream) {
      __classPrivateFieldGet3(
        this,
        _ChatCompletionStream_instances,
        "m",
        _ChatCompletionStream_addChunk
      ).call(this, chunk);
    }
    if ((_a3 = stream.controller.signal) == null ? void 0 : _a3.aborted) {
      throw new APIUserAbortError();
    }
    return this._addChatCompletion(
      __classPrivateFieldGet3(
        this,
        _ChatCompletionStream_instances,
        "m",
        _ChatCompletionStream_endRequest
      ).call(this)
    );
  }
  async _fromReadableStream(readableStream, options) {
    var _a3;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted) this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet3(
      this,
      _ChatCompletionStream_instances,
      "m",
      _ChatCompletionStream_beginRequest
    ).call(this);
    this._connected();
    const stream = Stream.fromReadableStream(readableStream, this.controller);
    let chatId;
    for await (const chunk of stream) {
      if (chatId && chatId !== chunk.id) {
        this._addChatCompletion(
          __classPrivateFieldGet3(
            this,
            _ChatCompletionStream_instances,
            "m",
            _ChatCompletionStream_endRequest
          ).call(this)
        );
      }
      __classPrivateFieldGet3(
        this,
        _ChatCompletionStream_instances,
        "m",
        _ChatCompletionStream_addChunk
      ).call(this, chunk);
      chatId = chunk.id;
    }
    if ((_a3 = stream.controller.signal) == null ? void 0 : _a3.aborted) {
      throw new APIUserAbortError();
    }
    return this._addChatCompletion(
      __classPrivateFieldGet3(
        this,
        _ChatCompletionStream_instances,
        "m",
        _ChatCompletionStream_endRequest
      ).call(this)
    );
  }
  [((_ChatCompletionStream_currentChatCompletionSnapshot =
    /* @__PURE__ */ new WeakMap()),
  (_ChatCompletionStream_instances = /* @__PURE__ */ new WeakSet()),
  (_ChatCompletionStream_beginRequest =
    function _ChatCompletionStream_beginRequest2() {
      if (this.ended) return;
      __classPrivateFieldSet3(
        this,
        _ChatCompletionStream_currentChatCompletionSnapshot,
        void 0,
        "f"
      );
    }),
  (_ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk2(
    chunk
  ) {
    var _a3, _b, _c;
    if (this.ended) return;
    const completion = __classPrivateFieldGet3(
      this,
      _ChatCompletionStream_instances,
      "m",
      _ChatCompletionStream_accumulateChatCompletion
    ).call(this, chunk);
    this._emit("chunk", chunk, completion);
    const delta =
      (_b = (_a3 = chunk.choices[0]) == null ? void 0 : _a3.delta) == null
        ? void 0
        : _b.content;
    const snapshot = (_c = completion.choices[0]) == null ? void 0 : _c.message;
    if (
      delta != null &&
      (snapshot == null ? void 0 : snapshot.role) === "assistant" &&
      (snapshot == null ? void 0 : snapshot.content)
    ) {
      this._emit("content", delta, snapshot.content);
    }
  }),
  (_ChatCompletionStream_endRequest =
    function _ChatCompletionStream_endRequest2() {
      if (this.ended) {
        throw new OpenAIError(`stream has ended, this shouldn't happen`);
      }
      const snapshot = __classPrivateFieldGet3(
        this,
        _ChatCompletionStream_currentChatCompletionSnapshot,
        "f"
      );
      if (!snapshot) {
        throw new OpenAIError(`request ended without sending any chunks`);
      }
      __classPrivateFieldSet3(
        this,
        _ChatCompletionStream_currentChatCompletionSnapshot,
        void 0,
        "f"
      );
      return finalizeChatCompletion(snapshot);
    }),
  (_ChatCompletionStream_accumulateChatCompletion =
    function _ChatCompletionStream_accumulateChatCompletion2(chunk) {
      var _a4, _b2, _c;
      var _a3, _b;
      let snapshot = __classPrivateFieldGet3(
        this,
        _ChatCompletionStream_currentChatCompletionSnapshot,
        "f"
      );
      const { choices, ...rest } = chunk;
      if (!snapshot) {
        snapshot = __classPrivateFieldSet3(
          this,
          _ChatCompletionStream_currentChatCompletionSnapshot,
          {
            ...rest,
            choices: [],
          },
          "f"
        );
      } else {
        Object.assign(snapshot, rest);
      }
      for (const { delta, finish_reason, index, ...other } of chunk.choices) {
        let choice = snapshot.choices[index];
        if (!choice) {
          snapshot.choices[index] = {
            finish_reason,
            index,
            message: delta,
            ...other,
          };
          continue;
        }
        if (finish_reason) choice.finish_reason = finish_reason;
        Object.assign(choice, other);
        if (!delta) continue;
        const { content, function_call, role, tool_calls } = delta;
        if (content)
          choice.message.content = (choice.message.content || "") + content;
        if (role) choice.message.role = role;
        if (function_call) {
          if (!choice.message.function_call) {
            choice.message.function_call = function_call;
          } else {
            if (function_call.name)
              choice.message.function_call.name = function_call.name;
            if (function_call.arguments) {
              (_a4 = (_a3 = choice.message.function_call).arguments) != null
                ? _a4
                : (_a3.arguments = "");
              choice.message.function_call.arguments += function_call.arguments;
            }
          }
        }
        if (tool_calls) {
          if (!choice.message.tool_calls) choice.message.tool_calls = [];
          for (const { index: index2, id, type, function: fn } of tool_calls) {
            const tool_call =
              (_b2 = (_b = choice.message.tool_calls)[index2]) != null
                ? _b2
                : (_b[index2] = {});
            if (id) tool_call.id = id;
            if (type) tool_call.type = type;
            if (fn)
              (_c = tool_call.function) != null
                ? _c
                : (tool_call.function = { arguments: "" });
            if (fn == null ? void 0 : fn.name)
              tool_call.function.name = fn.name;
            if (fn == null ? void 0 : fn.arguments)
              tool_call.function.arguments += fn.arguments;
          }
        }
      }
      return snapshot;
    }),
  Symbol.asyncIterator)]() {
    const pushQueue = [];
    const readQueue = [];
    let done = false;
    this.on("chunk", (chunk) => {
      const reader = readQueue.shift();
      if (reader) {
        reader(chunk);
      } else {
        pushQueue.push(chunk);
      }
    });
    this.on("end", () => {
      done = true;
      for (const reader of readQueue) {
        reader(void 0);
      }
      readQueue.length = 0;
    });
    return {
      next: async () => {
        if (!pushQueue.length) {
          if (done) {
            return { value: void 0, done: true };
          }
          return new Promise((resolve) => readQueue.push(resolve)).then(
            (chunk2) =>
              chunk2
                ? { value: chunk2, done: false }
                : { value: void 0, done: true }
          );
        }
        const chunk = pushQueue.shift();
        return { value: chunk, done: false };
      },
    };
  }
  toReadableStream() {
    const stream = new Stream(
      this[Symbol.asyncIterator].bind(this),
      this.controller
    );
    return stream.toReadableStream();
  }
};
function finalizeChatCompletion(snapshot) {
  const { id, choices, created, model } = snapshot;
  return {
    id,
    choices: choices.map(({ message, finish_reason, index }) => {
      if (!finish_reason)
        throw new OpenAIError(`missing finish_reason for choice ${index}`);
      const { content = null, function_call, tool_calls } = message;
      const role = message.role;
      if (!role) throw new OpenAIError(`missing role for choice ${index}`);
      if (function_call) {
        const { arguments: args, name } = function_call;
        if (args == null)
          throw new OpenAIError(
            `missing function_call.arguments for choice ${index}`
          );
        if (!name)
          throw new OpenAIError(
            `missing function_call.name for choice ${index}`
          );
        return {
          message: { content, function_call: { arguments: args, name }, role },
          finish_reason,
          index,
        };
      }
      if (tool_calls) {
        return {
          index,
          finish_reason,
          message: {
            role,
            content,
            tool_calls: tool_calls.map((tool_call, i) => {
              const { function: fn, type, id: id2 } = tool_call;
              const { arguments: args, name } = fn || {};
              if (id2 == null)
                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].id
${str(snapshot)}`);
              if (type == null)
                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].type
${str(snapshot)}`);
              if (name == null)
                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name
${str(snapshot)}`);
              if (args == null)
                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments
${str(snapshot)}`);
              return { id: id2, type, function: { name, arguments: args } };
            }),
          },
        };
      }
      return { message: { content, role }, finish_reason, index };
    }),
    created,
    model,
    object: "chat.completion",
  };
}
function str(x) {
  return JSON.stringify(x);
}

// node_modules/openai/lib/ChatCompletionStreamingRunner.mjs
var ChatCompletionStreamingRunner = class extends ChatCompletionStream {
  static fromReadableStream(stream) {
    const runner = new ChatCompletionStreamingRunner();
    runner._run(() => runner._fromReadableStream(stream));
    return runner;
  }
  static runFunctions(completions, params, options) {
    const runner = new ChatCompletionStreamingRunner();
    runner._run(() =>
      runner._runFunctions(completions, params, {
        ...options,
        headers: {
          ...(options == null ? void 0 : options.headers),
          "X-Stainless-Helper-Method": "runFunctions",
        },
      })
    );
    return runner;
  }
  static runTools(completions, params, options) {
    const runner = new ChatCompletionStreamingRunner();
    runner._run(() =>
      runner._runTools(completions, params, {
        ...options,
        headers: {
          ...(options == null ? void 0 : options.headers),
          "X-Stainless-Helper-Method": "runTools",
        },
      })
    );
    return runner;
  }
};

// node_modules/openai/resources/beta/chat/completions.mjs
var Completions2 = class extends APIResource {
  runFunctions(body, options) {
    if (body.stream) {
      return ChatCompletionStreamingRunner.runFunctions(
        this._client.chat.completions,
        body,
        options
      );
    }
    return ChatCompletionRunner.runFunctions(
      this._client.chat.completions,
      body,
      options
    );
  }
  runTools(body, options) {
    if (body.stream) {
      return ChatCompletionStreamingRunner.runTools(
        this._client.chat.completions,
        body,
        options
      );
    }
    return ChatCompletionRunner.runTools(
      this._client.chat.completions,
      body,
      options
    );
  }
  stream(body, options) {
    return ChatCompletionStream.createChatCompletion(
      this._client.chat.completions,
      body,
      options
    );
  }
};

// node_modules/openai/resources/beta/chat/chat.mjs
var Chat2 = class extends APIResource {
  constructor() {
    super(...arguments);
    this.completions = new Completions2(this._client);
  }
};
(function (Chat4) {
  Chat4.Completions = Completions2;
})(Chat2 || (Chat2 = {}));

// node_modules/openai/resources/beta/threads/messages/files.mjs
var Files2 = class extends APIResource {
  retrieve(threadId, messageId, fileId, options) {
    return this._client.get(
      `/threads/${threadId}/messages/${messageId}/files/${fileId}`,
      {
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
  list(threadId, messageId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(threadId, messageId, {}, query);
    }
    return this._client.getAPIList(
      `/threads/${threadId}/messages/${messageId}/files`,
      MessageFilesPage,
      {
        query,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
};
var MessageFilesPage = class extends CursorPage {};
(function (Files4) {
  Files4.MessageFilesPage = MessageFilesPage;
})(Files2 || (Files2 = {}));

// node_modules/openai/resources/beta/threads/messages/messages.mjs
var Messages = class extends APIResource {
  constructor() {
    super(...arguments);
    this.files = new Files2(this._client);
  }
  create(threadId, body, options) {
    return this._client.post(`/threads/${threadId}/messages`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(threadId, messageId, options) {
    return this._client.get(`/threads/${threadId}/messages/${messageId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  update(threadId, messageId, body, options) {
    return this._client.post(`/threads/${threadId}/messages/${messageId}`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  list(threadId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(threadId, {}, query);
    }
    return this._client.getAPIList(
      `/threads/${threadId}/messages`,
      ThreadMessagesPage,
      {
        query,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
};
var ThreadMessagesPage = class extends CursorPage {};
(function (Messages2) {
  Messages2.ThreadMessagesPage = ThreadMessagesPage;
  Messages2.Files = Files2;
  Messages2.MessageFilesPage = MessageFilesPage;
})(Messages || (Messages = {}));

// node_modules/openai/resources/beta/threads/runs/steps.mjs
var Steps = class extends APIResource {
  retrieve(threadId, runId, stepId, options) {
    return this._client.get(
      `/threads/${threadId}/runs/${runId}/steps/${stepId}`,
      {
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
  list(threadId, runId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(threadId, runId, {}, query);
    }
    return this._client.getAPIList(
      `/threads/${threadId}/runs/${runId}/steps`,
      RunStepsPage,
      {
        query,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
};
var RunStepsPage = class extends CursorPage {};
(function (Steps2) {
  Steps2.RunStepsPage = RunStepsPage;
})(Steps || (Steps = {}));

// node_modules/openai/resources/beta/threads/runs/runs.mjs
var Runs = class extends APIResource {
  constructor() {
    super(...arguments);
    this.steps = new Steps(this._client);
  }
  create(threadId, body, options) {
    return this._client.post(`/threads/${threadId}/runs`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(threadId, runId, options) {
    return this._client.get(`/threads/${threadId}/runs/${runId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  update(threadId, runId, body, options) {
    return this._client.post(`/threads/${threadId}/runs/${runId}`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  list(threadId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(threadId, {}, query);
    }
    return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {
      query,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  cancel(threadId, runId, options) {
    return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  submitToolOutputs(threadId, runId, body, options) {
    return this._client.post(
      `/threads/${threadId}/runs/${runId}/submit_tool_outputs`,
      {
        body,
        ...options,
        headers: {
          "OpenAI-Beta": "assistants=v1",
          ...(options == null ? void 0 : options.headers),
        },
      }
    );
  }
};
var RunsPage = class extends CursorPage {};
(function (Runs2) {
  Runs2.RunsPage = RunsPage;
  Runs2.Steps = Steps;
  Runs2.RunStepsPage = RunStepsPage;
})(Runs || (Runs = {}));

// node_modules/openai/resources/beta/threads/threads.mjs
var Threads = class extends APIResource {
  constructor() {
    super(...arguments);
    this.runs = new Runs(this._client);
    this.messages = new Messages(this._client);
  }
  create(body = {}, options) {
    if (isRequestOptions(body)) {
      return this.create({}, body);
    }
    return this._client.post("/threads", {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  retrieve(threadId, options) {
    return this._client.get(`/threads/${threadId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  update(threadId, body, options) {
    return this._client.post(`/threads/${threadId}`, {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  del(threadId, options) {
    return this._client.delete(`/threads/${threadId}`, {
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  createAndRun(body, options) {
    return this._client.post("/threads/runs", {
      body,
      ...options,
      headers: {
        "OpenAI-Beta": "assistants=v1",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
};
(function (Threads2) {
  Threads2.Runs = Runs;
  Threads2.RunsPage = RunsPage;
  Threads2.Messages = Messages;
  Threads2.ThreadMessagesPage = ThreadMessagesPage;
})(Threads || (Threads = {}));

// node_modules/openai/resources/beta/beta.mjs
var Beta = class extends APIResource {
  constructor() {
    super(...arguments);
    this.chat = new Chat2(this._client);
    this.assistants = new Assistants(this._client);
    this.threads = new Threads(this._client);
  }
};
(function (Beta2) {
  Beta2.Chat = Chat2;
  Beta2.Assistants = Assistants;
  Beta2.AssistantsPage = AssistantsPage;
  Beta2.Threads = Threads;
})(Beta || (Beta = {}));

// node_modules/openai/resources/completions.mjs
var Completions3 = class extends APIResource {
  create(body, options) {
    var _a3;
    return this._client.post("/completions", {
      body,
      ...options,
      stream: (_a3 = body.stream) != null ? _a3 : false,
    });
  }
};
(function (Completions5) {})(Completions3 || (Completions3 = {}));

// node_modules/openai/resources/embeddings.mjs
var Embeddings = class extends APIResource {
  create(body, options) {
    return this._client.post("/embeddings", { body, ...options });
  }
};
(function (Embeddings2) {})(Embeddings || (Embeddings = {}));

// node_modules/openai/resources/edits.mjs
var Edits = class extends APIResource {
  create(body, options) {
    return this._client.post("/edits", { body, ...options });
  }
};
(function (Edits2) {})(Edits || (Edits = {}));

// node_modules/openai/resources/files.mjs
var Files3 = class extends APIResource {
  create(body, options) {
    return this._client.post(
      "/files",
      multipartFormRequestOptions({ body, ...options })
    );
  }
  retrieve(fileId, options) {
    return this._client.get(`/files/${fileId}`, options);
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/files", FileObjectsPage, {
      query,
      ...options,
    });
  }
  del(fileId, options) {
    return this._client.delete(`/files/${fileId}`, options);
  }
  content(fileId, options) {
    return this._client.get(`/files/${fileId}/content`, {
      ...options,
      __binaryResponse: true,
    });
  }
  retrieveContent(fileId, options) {
    return this._client.get(`/files/${fileId}/content`, {
      ...options,
      headers: {
        Accept: "application/json",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
  async waitForProcessing(
    id,
    { pollInterval = 5e3, maxWait = 30 * 60 * 1e3 } = {}
  ) {
    const TERMINAL_STATES = /* @__PURE__ */ new Set([
      "processed",
      "error",
      "deleted",
    ]);
    const start = Date.now();
    let file = await this.retrieve(id);
    while (!file.status || !TERMINAL_STATES.has(file.status)) {
      await sleep(pollInterval);
      file = await this.retrieve(id);
      if (Date.now() - start > maxWait) {
        throw new APIConnectionTimeoutError({
          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,
        });
      }
    }
    return file;
  }
};
var FileObjectsPage = class extends Page {};
(function (Files4) {
  Files4.FileObjectsPage = FileObjectsPage;
})(Files3 || (Files3 = {}));

// node_modules/openai/resources/fine-tunes.mjs
var FineTunes = class extends APIResource {
  create(body, options) {
    return this._client.post("/fine-tunes", { body, ...options });
  }
  retrieve(fineTuneId, options) {
    return this._client.get(`/fine-tunes/${fineTuneId}`, options);
  }
  list(options) {
    return this._client.getAPIList("/fine-tunes", FineTunesPage, options);
  }
  cancel(fineTuneId, options) {
    return this._client.post(`/fine-tunes/${fineTuneId}/cancel`, options);
  }
  listEvents(fineTuneId, query, options) {
    var _a3;
    return this._client.get(`/fine-tunes/${fineTuneId}/events`, {
      query,
      timeout: 864e5,
      ...options,
      stream:
        (_a3 = query == null ? void 0 : query.stream) != null ? _a3 : false,
    });
  }
};
var FineTunesPage = class extends Page {};
(function (FineTunes2) {
  FineTunes2.FineTunesPage = FineTunesPage;
})(FineTunes || (FineTunes = {}));

// node_modules/openai/resources/fine-tuning/jobs.mjs
var Jobs = class extends APIResource {
  create(body, options) {
    return this._client.post("/fine_tuning/jobs", { body, ...options });
  }
  retrieve(fineTuningJobId, options) {
    return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/fine_tuning/jobs", FineTuningJobsPage, {
      query,
      ...options,
    });
  }
  cancel(fineTuningJobId, options) {
    return this._client.post(
      `/fine_tuning/jobs/${fineTuningJobId}/cancel`,
      options
    );
  }
  listEvents(fineTuningJobId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.listEvents(fineTuningJobId, {}, query);
    }
    return this._client.getAPIList(
      `/fine_tuning/jobs/${fineTuningJobId}/events`,
      FineTuningJobEventsPage,
      {
        query,
        ...options,
      }
    );
  }
};
var FineTuningJobsPage = class extends CursorPage {};
var FineTuningJobEventsPage = class extends CursorPage {};
(function (Jobs2) {
  Jobs2.FineTuningJobsPage = FineTuningJobsPage;
  Jobs2.FineTuningJobEventsPage = FineTuningJobEventsPage;
})(Jobs || (Jobs = {}));

// node_modules/openai/resources/fine-tuning/fine-tuning.mjs
var FineTuning = class extends APIResource {
  constructor() {
    super(...arguments);
    this.jobs = new Jobs(this._client);
  }
};
(function (FineTuning2) {
  FineTuning2.Jobs = Jobs;
  FineTuning2.FineTuningJobsPage = FineTuningJobsPage;
  FineTuning2.FineTuningJobEventsPage = FineTuningJobEventsPage;
})(FineTuning || (FineTuning = {}));

// node_modules/openai/resources/images.mjs
var Images = class extends APIResource {
  createVariation(body, options) {
    return this._client.post(
      "/images/variations",
      multipartFormRequestOptions({ body, ...options })
    );
  }
  edit(body, options) {
    return this._client.post(
      "/images/edits",
      multipartFormRequestOptions({ body, ...options })
    );
  }
  generate(body, options) {
    return this._client.post("/images/generations", { body, ...options });
  }
};
(function (Images2) {})(Images || (Images = {}));

// node_modules/openai/resources/models.mjs
var Models = class extends APIResource {
  retrieve(model, options) {
    return this._client.get(`/models/${model}`, options);
  }
  list(options) {
    return this._client.getAPIList("/models", ModelsPage, options);
  }
  del(model, options) {
    return this._client.delete(`/models/${model}`, options);
  }
};
var ModelsPage = class extends Page {};
(function (Models3) {
  Models3.ModelsPage = ModelsPage;
})(Models || (Models = {}));

// node_modules/openai/resources/moderations.mjs
var Moderations = class extends APIResource {
  create(body, options) {
    return this._client.post("/moderations", { body, ...options });
  }
};
(function (Moderations2) {})(Moderations || (Moderations = {}));

// node_modules/openai/index.mjs
var _a;
var OpenAI = class extends APIClient {
  constructor({
    apiKey = readEnv("OPENAI_API_KEY"),
    organization = ((_a3) =>
      (_a3 = readEnv("OPENAI_ORG_ID")) != null ? _a3 : null)(),
    ...opts
  } = {}) {
    var _a4, _b;
    if (apiKey === void 0) {
      throw new OpenAIError(
        "The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' })."
      );
    }
    const options = {
      apiKey,
      organization,
      ...opts,
      baseURL: (_a4 = opts.baseURL) != null ? _a4 : `https://api.openai.com/v1`,
    };
    if (!options.dangerouslyAllowBrowser && isRunningInBrowser()) {
      throw new OpenAIError(
        "It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n"
      );
    }
    super({
      baseURL: options.baseURL,
      timeout: (_b = options.timeout) != null ? _b : 6e5,
      httpAgent: options.httpAgent,
      maxRetries: options.maxRetries,
      fetch: options.fetch,
    });
    this.completions = new Completions3(this);
    this.chat = new Chat(this);
    this.edits = new Edits(this);
    this.embeddings = new Embeddings(this);
    this.files = new Files3(this);
    this.images = new Images(this);
    this.audio = new Audio(this);
    this.moderations = new Moderations(this);
    this.models = new Models(this);
    this.fineTuning = new FineTuning(this);
    this.fineTunes = new FineTunes(this);
    this.beta = new Beta(this);
    this._options = options;
    this.apiKey = apiKey;
    this.organization = organization;
  }
  defaultQuery() {
    return this._options.defaultQuery;
  }
  defaultHeaders(opts) {
    return {
      ...super.defaultHeaders(opts),
      "OpenAI-Organization": this.organization,
      ...this._options.defaultHeaders,
    };
  }
  authHeaders(opts) {
    return { Authorization: `Bearer ${this.apiKey}` };
  }
};
_a = OpenAI;
OpenAI.OpenAI = _a;
OpenAI.OpenAIError = OpenAIError;
OpenAI.APIError = APIError;
OpenAI.APIConnectionError = APIConnectionError;
OpenAI.APIConnectionTimeoutError = APIConnectionTimeoutError;
OpenAI.APIUserAbortError = APIUserAbortError;
OpenAI.NotFoundError = NotFoundError;
OpenAI.ConflictError = ConflictError;
OpenAI.RateLimitError = RateLimitError;
OpenAI.BadRequestError = BadRequestError;
OpenAI.AuthenticationError = AuthenticationError;
OpenAI.InternalServerError = InternalServerError;
OpenAI.PermissionDeniedError = PermissionDeniedError;
OpenAI.UnprocessableEntityError = UnprocessableEntityError;
var {
  OpenAIError: OpenAIError2,
  APIError: APIError2,
  APIConnectionError: APIConnectionError2,
  APIConnectionTimeoutError: APIConnectionTimeoutError2,
  APIUserAbortError: APIUserAbortError2,
  NotFoundError: NotFoundError2,
  ConflictError: ConflictError2,
  RateLimitError: RateLimitError2,
  BadRequestError: BadRequestError2,
  AuthenticationError: AuthenticationError2,
  InternalServerError: InternalServerError2,
  PermissionDeniedError: PermissionDeniedError2,
  UnprocessableEntityError: UnprocessableEntityError2,
} = error_exports;
var toFile2 = toFile;
(function (OpenAI2) {
  OpenAI2.toFile = toFile;
  OpenAI2.fileFromPath = fileFromPath;
  OpenAI2.Page = Page;
  OpenAI2.CursorPage = CursorPage;
  OpenAI2.Completions = Completions3;
  OpenAI2.Chat = Chat;
  OpenAI2.Edits = Edits;
  OpenAI2.Embeddings = Embeddings;
  OpenAI2.Files = Files3;
  OpenAI2.FileObjectsPage = FileObjectsPage;
  OpenAI2.Images = Images;
  OpenAI2.Audio = Audio;
  OpenAI2.Moderations = Moderations;
  OpenAI2.Models = Models;
  OpenAI2.ModelsPage = ModelsPage;
  OpenAI2.FineTuning = FineTuning;
  OpenAI2.FineTunes = FineTunes;
  OpenAI2.FineTunesPage = FineTunesPage;
  OpenAI2.Beta = Beta;
})(OpenAI || (OpenAI = {}));
var openai_default = OpenAI;

// src/main.ts
var fs = __toESM(require("fs"));

// src/formatter.js
function format_url_text(final_text, url) {
  final_text =
    `## ${url} Research
` + final_text;
  final_text = final_text.replace(
    "Problem to be solved:",
    "#### Problem to be solved"
  );
  final_text = final_text.replace("Product:", "#### Product");
  final_text = final_text.replace("Features:", "#### Features");
  final_text = final_text.replace("Business Model:", "#### Business Model");
  final_text = final_text.replace("Competition:", "#### Competition");
  final_text = final_text.replace("Vision:", "#### Vision");
  final_text = final_text.replace("Extras:", "#### Extras");
  return final_text;
}

// src/search.ts
var import_obsidian3 = require("obsidian");
async function specific_web_research(
  task,
  website,
  search_query,
  openai2,
  editor
) {
  let presentation_prompt = "Summarize the following paragraphs.";
  let title = "New Section";
  if (task.toLowerCase() == "competition") {
    title = "Competition Research";
    presentation_prompt = `Highlight the most important facts for an investor from the following paragraphs. If there are none, say "Nothing". Otherwise always respond in the following format: 
            - Problems to be solved
            - Product and Technology
            - Money raised
            - Team
            - Other important points`;
  } else if (task.toLowerCase() == "market-research") {
    title = "Market Research";
    let industry = search_query.split("industry market")[0];
    presentation_prompt = `What facts about the ${industry} market can an investor learn from the following paragraphs? If there are no facts to learn simply output "Nothing"`;
  }
  let message = await execute_search_task(
    title,
    website,
    search_query,
    presentation_prompt,
    openai2,
    editor
  );
  return message;
}
async function execute_search_task(
  task,
  website,
  search_query,
  presentation_prompt,
  openai2,
  editor
) {
  try {
    let website_name = "";
    if (website == "") {
      website_name = "general research";
    } else {
      website_name = website.split(".")[0];
    }
    let message = `#### ${task} through ${website_name}
`;
    let summaries = [];
    let sources = [];
    let query = `site:${website} ${search_query}`;
    let result = await you_research(query);
    let counter = 0;
    let user_prompt = presentation_prompt;
    for (let element of result) {
      let snippets = element["snippets"];
      let title = element["title"];
      let url = element["url"];
      let summary = "";
      let paragraphs = snippets;
      paragraphs[0] = "- " + paragraphs[0];
      let string_paragraphs = paragraphs.join("\n\n- ");
      if (string_paragraphs && string_paragraphs.length > 1) {
        const response = await openai2.chat.completions.create({
          model: gpt_3_latest,
          messages: [
            {
              role: "system",
              content:
                "Act as an investigative journalist who is obsessed with the truth and accuracy. You always give answers in bullet points.",
            },
            {
              role: "user",
              content:
                `${user_prompt}
Paragraphs:
` + string_paragraphs,
            },
          ],
          temperature: 0,
          max_tokens: 1024,
          top_p: 1,
          frequency_penalty: 0,
          presence_penalty: 0,
        });
        summary += response.choices[0].message.content + "\n";
      }
      summaries.push(summary);
      let source = `[${title}](${url})`;
      sources.push(source);
      counter++;
      if (counter == 5) {
        break;
      }
    }
    for (let i = 0; i < summaries.length; i++) {
      message += `##### ${sources[i]}
`;
      message += summaries[i] + "\n\n";
    }
    return message;
  } catch (error) {
    console.log(`Error while doing research: ${error}`);
    new import_obsidian3.Notice(`Error while doing research`);
  }
  return "";
}
async function you_research(query) {
  let results = await (0, import_obsidian3.request)({
    url: `https://you-researcher-container-xm5lmdnsxq-uc.a.run.app/search?query=${query}`,
    method: "GET",
  });
  return await JSON.parse(results)["hits"];
}

// src/prompts.js
var DEFENSIBILITY_ANALYSIS_SYSTEM_PROMPT =
  "Use the following guidelines to determine what kinds of defensibility a startup can build with time:\n- **Network effect**: When every user creates more value for other users, forming a positive feedback loop. This can be local or global, and is one of the few forms of defensibility that can arise immediately upon launch of a company.\n- **Platform effect**: When a company becomes a sticky product because so many other companies have integrated against it. This usually comes after a company has enough users that others want to build against its platform to reach them.\n- **Integrations**: When a company integrates against many other APIs, code bases, etc. that are hard to reproduce, or when a company's services do integrations for the company against other vendors. This makes it hard to displace the company as each implementation is a unique and complex process.\n- **Building a ton of stuff**: When a company bundles and cross sells products that prevent other companies from finding a wedge to compete with them, or when a company has a big product footprint that makes it hard for new entrants to reach feature parity.\n- **Deals**: When a company secures early access, exclusive provider or distribution, or backend deals that give it scale, brand, or access advantages over competitors. This may include deals with APIs, data sources, regulators, or customers.\n- **Sales as moat**: When a company locks in customers with long term contracts, or has a sales process that makes it easier for enterprises to buy from them than from new suppliers. This may include security reviews, procurement processes, or pricing strategies.\n- **Regulatory**: When a company receives regulatory approvals that provide a moat. This may include licenses, permits, or exemptions that are hard to obtain or replicate by competitors.\n- **Data or system of record effect**: When a company has unique or proprietary data, or owns a customer's data or has a long historical record of it. This can create defensibility by making the data more valuable and harder to switch away from. Similarly, being a system of record for a user, entity, etc. can be a powerful position to be in.\n- **Scale effects**: When a company has access to large sums of money or business volume that allows it to do things that will make it difficult for competitors to upend them. This may include capital scale, business scale and negotiation, or pricing advantages.\n- **Open source**: When a company benefits from being the creator or contributor of an open source software project that is widely used or adopted by developers. This can create defensibility by giving the company brand recognition, community influence, and talent access.\n- **Brand**: When a company becomes synonymous with the thing they do, often by creating a new product category, or doing something vastly better than competitors. This can create defensibility by making the company the default choice for customers and creating loyalty and trust.\n- **IP moat**: When a company has intellectual property that protects its product or technology from being copied or infringed by competitors. This tends to be more effective in hard tech or biotech companies than most consumer or SaaS products.\n- **Speed**: When a company can execute faster and better than competitors, especially incumbents. This can create defensibility by allowing the company to iterate quickly, respond to customer feedback, and hire and close candidates faster.\n- **Pricing**: When a company can offer a lower price than competitors due to a lower cost structure, a lack of an existing product to cannibalize, or a different business model. This can create defensibility by attracting more customers and creating higher margins.\n- **New business models**: When a company can innovate on business model to create a higher leverage business or different incentive structure. This can create defensibility by disrupting incumbents who are used to traditional ways of doing things.\nAlways think step by step!";
var GUIDANCE_WORKFLOW_SYSTEM_PROMPT =
  "You are a helpful assistant to a venture capital investor. Your main job is guiding the investor to always focus on the bigger picture and find the core arguments they should focus us. Your arguments are always concise and to the point. When needed, you can guide the investor by asking questions that help them focus on the essentials.\nIn your analysis, you should always be customer-centric and focused on the target customer of the startup.\nThe following aspects are extremely crucial to the investor:\n- Who is the target customer for the startup?\n- What is the hardest part about the job of the target customer?\n- What is the startup's unique value proposition for the target customer?";

// src/fireflies.ts
async function get_meeting_id(meeting_name, fireflies_api_key2) {
  let meetings = await fetch("https://api.fireflies.ai/graphql", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${fireflies_api_key2}`,
    },
    body: JSON.stringify({
      query: `
            query {
                transcripts {
                    id
                    title
                    fireflies_users
                    participants
                    date
                    transcript_url
                    duration
                }
            }
        `,
    }),
  })
    .then((result) => {
      return result.json();
    })
    .then((result) => {
      return result.data;
    });
  let meetings_list = meetings["transcripts"];
  let meeting_id = "";
  for (let meeting of meetings_list) {
    if (meeting["title"] == meeting_name) {
      meeting_id = meeting["id"];
      break;
    }
  }
  return meeting_id;
}
async function get_meeting_transcript_by_id(id, investor_names2, api_key) {
  let transcript = await fetch("https://api.fireflies.ai/graphql", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${api_key}`,
    },
    body: JSON.stringify({
      query: `
              query {
                transcript(id: "${id}"){ title date sentences {text speaker_name} }
              }
          `,
    }),
  })
    .then((result) => {
      return result.json();
    })
    .then((result) => {
      return result.data;
    });
  let current_sentence = "";
  let useful_paragraphs = [];
  let current_speaker =
    transcript["transcript"]["sentences"][0]["speaker_name"];
  for (let sentence of transcript["transcript"]["sentences"]) {
    if (sentence["speaker_name"] == current_speaker) {
      current_sentence += sentence["text"];
    } else {
      if (current_sentence.length != 0) {
        if (investor_names2.includes(current_speaker)) {
          current_speaker += " (Investor)";
          console.log(current_speaker);
        } else {
          current_speaker += " (Founder)";
        }
        current_sentence = current_speaker + ": " + current_sentence + "\n";
        useful_paragraphs.push(current_sentence);
        current_sentence = sentence["text"];
        current_speaker = sentence["speaker_name"];
      }
    }
  }
  if (current_sentence.length != 0) {
    useful_paragraphs.push(current_sentence);
  }
  return useful_paragraphs;
}
async function transcript_json_to_array_string(
  transcript_json_string,
  investor_names2
) {
  let json = JSON.parse(transcript_json_string);
  let transcript = json["data"];
  let current_sentence = "";
  let useful_paragraphs = [];
  let current_speaker =
    transcript["transcript"]["sentences"][0]["speaker_name"];
  for (let sentence of transcript["transcript"]["sentences"]) {
    if (sentence["speaker_name"] == current_speaker) {
      current_sentence += sentence["text"];
    } else {
      if (current_sentence.length != 0) {
        if (investor_names2.includes(current_speaker)) {
          current_speaker += " (Investor)";
          console.log(current_speaker);
        } else {
          current_speaker += " (Founder)";
        }
        current_sentence = current_speaker + ": " + current_sentence + "\n";
        useful_paragraphs.push(current_sentence);
        current_sentence = sentence["text"];
        current_speaker = sentence["speaker_name"];
      }
    }
  }
  if (current_sentence.length != 0) {
    useful_paragraphs.push(current_sentence);
  }
  return useful_paragraphs;
}

// node_modules/groq-sdk/version.mjs
var VERSION2 = "0.3.3";

// node_modules/groq-sdk/_shims/registry.mjs
var auto2 = false;
var kind2 = void 0;
var fetch3 = void 0;
var Request3 = void 0;
var Response3 = void 0;
var Headers3 = void 0;
var FormData3 = void 0;
var Blob3 = void 0;
var File3 = void 0;
var ReadableStream3 = void 0;
var getMultipartRequestOptions2 = void 0;
var getDefaultAgent2 = void 0;
var fileFromPath2 = void 0;
var isFsReadStream2 = void 0;
function setShims2(shims, options = { auto: false }) {
  if (auto2) {
    throw new Error(
      `you must \`import 'groq-sdk/shims/${shims.kind}'\` before importing anything else from groq-sdk`
    );
  }
  if (kind2) {
    throw new Error(
      `can't \`import 'groq-sdk/shims/${shims.kind}'\` after \`import 'groq-sdk/shims/${kind2}'\``
    );
  }
  auto2 = options.auto;
  kind2 = shims.kind;
  fetch3 = shims.fetch;
  Request3 = shims.Request;
  Response3 = shims.Response;
  Headers3 = shims.Headers;
  FormData3 = shims.FormData;
  Blob3 = shims.Blob;
  File3 = shims.File;
  ReadableStream3 = shims.ReadableStream;
  getMultipartRequestOptions2 = shims.getMultipartRequestOptions;
  getDefaultAgent2 = shims.getDefaultAgent;
  fileFromPath2 = shims.fileFromPath;
  isFsReadStream2 = shims.isFsReadStream;
}

// node_modules/groq-sdk/_shims/MultipartBody.mjs
var MultipartBody2 = class {
  constructor(body) {
    this.body = body;
  }
  get [Symbol.toStringTag]() {
    return "MultipartBody";
  }
};

// node_modules/groq-sdk/_shims/web-runtime.mjs
function getRuntime2({ manuallyImported } = {}) {
  const recommendation = manuallyImported
    ? `You may need to use polyfills`
    : `Add one of these imports before your first \`import \u2026 from 'groq-sdk'\`:
- \`import 'groq-sdk/shims/node'\` (if you're running on Node)
- \`import 'groq-sdk/shims/web'\` (otherwise)
`;
  let _fetch, _Request, _Response, _Headers;
  try {
    _fetch = fetch;
    _Request = Request;
    _Response = Response;
    _Headers = Headers;
  } catch (error) {
    throw new Error(
      `this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`
    );
  }
  return {
    kind: "web",
    fetch: _fetch,
    Request: _Request,
    Response: _Response,
    Headers: _Headers,
    FormData:
      typeof FormData !== "undefined"
        ? FormData
        : class FormData {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`
              );
            }
          },
    Blob:
      typeof Blob !== "undefined"
        ? Blob
        : class Blob {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`
              );
            }
          },
    File:
      typeof File !== "undefined"
        ? File
        : class File {
            constructor() {
              throw new Error(
                `file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`
              );
            }
          },
    ReadableStream:
      typeof ReadableStream !== "undefined"
        ? ReadableStream
        : class ReadableStream {
            constructor() {
              throw new Error(
                `streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`
              );
            }
          },
    getMultipartRequestOptions: async (form, opts) => ({
      ...opts,
      body: new MultipartBody2(form),
    }),
    getDefaultAgent: (url) => void 0,
    fileFromPath: () => {
      throw new Error(
        "The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/groq/groq-typescript#file-uploads"
      );
    },
    isFsReadStream: (value) => false,
  };
}

// node_modules/groq-sdk/_shims/index.mjs
if (!kind2) setShims2(getRuntime2(), { auto: true });

// node_modules/groq-sdk/error.mjs
var error_exports2 = {};
__export(error_exports2, {
  APIConnectionError: () => APIConnectionError3,
  APIConnectionTimeoutError: () => APIConnectionTimeoutError3,
  APIError: () => APIError3,
  APIUserAbortError: () => APIUserAbortError3,
  AuthenticationError: () => AuthenticationError3,
  BadRequestError: () => BadRequestError3,
  ConflictError: () => ConflictError3,
  GroqError: () => GroqError,
  InternalServerError: () => InternalServerError3,
  NotFoundError: () => NotFoundError3,
  PermissionDeniedError: () => PermissionDeniedError3,
  RateLimitError: () => RateLimitError3,
  UnprocessableEntityError: () => UnprocessableEntityError3,
});
var GroqError = class extends Error {};
var APIError3 = class extends GroqError {
  constructor(status, error, message, headers) {
    super(`${APIError3.makeMessage(status, error, message)}`);
    this.status = status;
    this.headers = headers;
    this.error = error;
  }
  static makeMessage(status, error, message) {
    const msg = (error == null ? void 0 : error.message)
      ? typeof error.message === "string"
        ? error.message
        : JSON.stringify(error.message)
      : error
      ? JSON.stringify(error)
      : message;
    if (status && msg) {
      return `${status} ${msg}`;
    }
    if (status) {
      return `${status} status code (no body)`;
    }
    if (msg) {
      return msg;
    }
    return "(no status code or body)";
  }
  static generate(status, errorResponse, message, headers) {
    if (!status) {
      return new APIConnectionError3({ cause: castToError2(errorResponse) });
    }
    const error = errorResponse;
    if (status === 400) {
      return new BadRequestError3(status, error, message, headers);
    }
    if (status === 401) {
      return new AuthenticationError3(status, error, message, headers);
    }
    if (status === 403) {
      return new PermissionDeniedError3(status, error, message, headers);
    }
    if (status === 404) {
      return new NotFoundError3(status, error, message, headers);
    }
    if (status === 409) {
      return new ConflictError3(status, error, message, headers);
    }
    if (status === 422) {
      return new UnprocessableEntityError3(status, error, message, headers);
    }
    if (status === 429) {
      return new RateLimitError3(status, error, message, headers);
    }
    if (status >= 500) {
      return new InternalServerError3(status, error, message, headers);
    }
    return new APIError3(status, error, message, headers);
  }
};
var APIUserAbortError3 = class extends APIError3 {
  constructor({ message } = {}) {
    super(void 0, void 0, message || "Request was aborted.", void 0);
    this.status = void 0;
  }
};
var APIConnectionError3 = class extends APIError3 {
  constructor({ message, cause }) {
    super(void 0, void 0, message || "Connection error.", void 0);
    this.status = void 0;
    if (cause) this.cause = cause;
  }
};
var APIConnectionTimeoutError3 = class extends APIConnectionError3 {
  constructor({ message } = {}) {
    super({ message: message != null ? message : "Request timed out." });
  }
};
var BadRequestError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 400;
  }
};
var AuthenticationError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 401;
  }
};
var PermissionDeniedError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 403;
  }
};
var NotFoundError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 404;
  }
};
var ConflictError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 409;
  }
};
var UnprocessableEntityError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 422;
  }
};
var RateLimitError3 = class extends APIError3 {
  constructor() {
    super(...arguments);
    this.status = 429;
  }
};
var InternalServerError3 = class extends APIError3 {};

// node_modules/groq-sdk/lib/streaming.mjs
var Stream2 = class {
  constructor(iterator, controller) {
    this.iterator = iterator;
    this.controller = controller;
  }
  static fromSSEResponse(response, controller) {
    let consumed = false;
    const decoder = new SSEDecoder2();
    async function* iterMessages() {
      if (!response.body) {
        controller.abort();
        throw new GroqError(
          `Attempted to iterate over a response with no body`
        );
      }
      const lineDecoder = new LineDecoder2();
      const iter = readableStreamAsyncIterable2(response.body);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          const sse = decoder.decode(line);
          if (sse) yield sse;
        }
      }
      for (const line of lineDecoder.flush()) {
        const sse = decoder.decode(line);
        if (sse) yield sse;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error(
          "Cannot iterate over a consumed stream, use `.tee()` to split the stream."
        );
      }
      consumed = true;
      let done = false;
      try {
        for await (const sse of iterMessages()) {
          if (done) continue;
          if (sse.data.startsWith("[DONE]")) {
            done = true;
            continue;
          }
          if (sse.event === null) {
            let data;
            try {
              data = JSON.parse(sse.data);
            } catch (e) {
              console.error(`Could not parse message into JSON:`, sse.data);
              console.error(`From chunk:`, sse.raw);
              throw e;
            }
            if (data && data.error) {
              throw new APIError3(void 0, data.error, void 0, void 0);
            }
            yield data;
          }
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError") return;
        throw e;
      } finally {
        if (!done) controller.abort();
      }
    }
    return new Stream2(iterator, controller);
  }
  static fromReadableStream(readableStream, controller) {
    let consumed = false;
    async function* iterLines() {
      const lineDecoder = new LineDecoder2();
      const iter = readableStreamAsyncIterable2(readableStream);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          yield line;
        }
      }
      for (const line of lineDecoder.flush()) {
        yield line;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error(
          "Cannot iterate over a consumed stream, use `.tee()` to split the stream."
        );
      }
      consumed = true;
      let done = false;
      try {
        for await (const line of iterLines()) {
          if (done) continue;
          if (line) yield JSON.parse(line);
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError") return;
        throw e;
      } finally {
        if (!done) controller.abort();
      }
    }
    return new Stream2(iterator, controller);
  }
  [Symbol.asyncIterator]() {
    return this.iterator();
  }
  tee() {
    const left = [];
    const right = [];
    const iterator = this.iterator();
    const teeIterator = (queue) => {
      return {
        next: () => {
          if (queue.length === 0) {
            const result = iterator.next();
            left.push(result);
            right.push(result);
          }
          return queue.shift();
        },
      };
    };
    return [
      new Stream2(() => teeIterator(left), this.controller),
      new Stream2(() => teeIterator(right), this.controller),
    ];
  }
  toReadableStream() {
    const self = this;
    let iter;
    const encoder = new TextEncoder();
    return new ReadableStream3({
      async start() {
        iter = self[Symbol.asyncIterator]();
      },
      async pull(ctrl) {
        try {
          const { value, done } = await iter.next();
          if (done) return ctrl.close();
          const bytes = encoder.encode(JSON.stringify(value) + "\n");
          ctrl.enqueue(bytes);
        } catch (err) {
          ctrl.error(err);
        }
      },
      async cancel() {
        var _a3;
        await ((_a3 = iter.return) == null ? void 0 : _a3.call(iter));
      },
    });
  }
};
var SSEDecoder2 = class {
  constructor() {
    this.event = null;
    this.data = [];
    this.chunks = [];
  }
  decode(line) {
    if (line.endsWith("\r")) {
      line = line.substring(0, line.length - 1);
    }
    if (!line) {
      if (!this.event && !this.data.length) return null;
      const sse = {
        event: this.event,
        data: this.data.join("\n"),
        raw: this.chunks,
      };
      this.event = null;
      this.data = [];
      this.chunks = [];
      return sse;
    }
    this.chunks.push(line);
    if (line.startsWith(":")) {
      return null;
    }
    let [fieldname, _, value] = partition2(line, ":");
    if (value.startsWith(" ")) {
      value = value.substring(1);
    }
    if (fieldname === "event") {
      this.event = value;
    } else if (fieldname === "data") {
      this.data.push(value);
    }
    return null;
  }
};
var LineDecoder2 = class {
  constructor() {
    this.buffer = [];
    this.trailingCR = false;
  }
  decode(chunk) {
    let text = this.decodeText(chunk);
    if (this.trailingCR) {
      text = "\r" + text;
      this.trailingCR = false;
    }
    if (text.endsWith("\r")) {
      this.trailingCR = true;
      text = text.slice(0, -1);
    }
    if (!text) {
      return [];
    }
    const trailingNewline = LineDecoder2.NEWLINE_CHARS.has(
      text[text.length - 1] || ""
    );
    let lines = text.split(LineDecoder2.NEWLINE_REGEXP);
    if (lines.length === 1 && !trailingNewline) {
      this.buffer.push(lines[0]);
      return [];
    }
    if (this.buffer.length > 0) {
      lines = [this.buffer.join("") + lines[0], ...lines.slice(1)];
      this.buffer = [];
    }
    if (!trailingNewline) {
      this.buffer = [lines.pop() || ""];
    }
    return lines;
  }
  decodeText(bytes) {
    var _a3;
    if (bytes == null) return "";
    if (typeof bytes === "string") return bytes;
    if (typeof Buffer !== "undefined") {
      if (bytes instanceof Buffer) {
        return bytes.toString();
      }
      if (bytes instanceof Uint8Array) {
        return Buffer.from(bytes).toString();
      }
      throw new GroqError(
        `Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`
      );
    }
    if (typeof TextDecoder !== "undefined") {
      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
        (_a3 = this.textDecoder) != null
          ? _a3
          : (this.textDecoder = new TextDecoder("utf8"));
        return this.textDecoder.decode(bytes);
      }
      throw new GroqError(
        `Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`
      );
    }
    throw new GroqError(
      `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`
    );
  }
  flush() {
    if (!this.buffer.length && !this.trailingCR) {
      return [];
    }
    const lines = [this.buffer.join("")];
    this.buffer = [];
    this.trailingCR = false;
    return lines;
  }
};
LineDecoder2.NEWLINE_CHARS = /* @__PURE__ */ new Set([
  "\n",
  "\r",
  "\v",
  "\f",
  "",
  "",
  "",
  "\x85",
  "\u2028",
  "\u2029",
]);
LineDecoder2.NEWLINE_REGEXP =
  /\r\n|[\n\r\x0b\x0c\x1c\x1d\x1e\x85\u2028\u2029]/g;
function partition2(str2, delimiter) {
  const index = str2.indexOf(delimiter);
  if (index !== -1) {
    return [
      str2.substring(0, index),
      delimiter,
      str2.substring(index + delimiter.length),
    ];
  }
  return [str2, "", ""];
}
function readableStreamAsyncIterable2(stream) {
  if (stream[Symbol.asyncIterator]) return stream;
  const reader = stream.getReader();
  return {
    async next() {
      try {
        const result = await reader.read();
        if (result == null ? void 0 : result.done) reader.releaseLock();
        return result;
      } catch (e) {
        reader.releaseLock();
        throw e;
      }
    },
    async return() {
      const cancelPromise = reader.cancel();
      reader.releaseLock();
      await cancelPromise;
      return { done: true, value: void 0 };
    },
    [Symbol.asyncIterator]() {
      return this;
    },
  };
}

// node_modules/groq-sdk/uploads.mjs
var isResponseLike2 = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.url === "string" &&
  typeof value.blob === "function";
var isFileLike2 = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.name === "string" &&
  typeof value.lastModified === "number" &&
  isBlobLike2(value);
var isBlobLike2 = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value.size === "number" &&
  typeof value.type === "string" &&
  typeof value.text === "function" &&
  typeof value.slice === "function" &&
  typeof value.arrayBuffer === "function";
var isUploadable2 = (value) => {
  return isFileLike2(value) || isResponseLike2(value) || isFsReadStream2(value);
};
async function toFile3(value, name, options = {}) {
  var _a3, _b, _c;
  value = await value;
  if (isResponseLike2(value)) {
    const blob = await value.blob();
    name ||
      (name =
        (_a3 = new URL(value.url).pathname.split(/[\\/]/).pop()) != null
          ? _a3
          : "unknown_file");
    return new File3([blob], name, options);
  }
  const bits = await getBytes2(value);
  name || (name = (_b = getName2(value)) != null ? _b : "unknown_file");
  if (!options.type) {
    const type = (_c = bits[0]) == null ? void 0 : _c.type;
    if (typeof type === "string") {
      options = { ...options, type };
    }
  }
  return new File3(bits, name, options);
}
async function getBytes2(value) {
  var _a3;
  let parts = [];
  if (
    typeof value === "string" ||
    ArrayBuffer.isView(value) ||
    value instanceof ArrayBuffer
  ) {
    parts.push(value);
  } else if (isBlobLike2(value)) {
    parts.push(await value.arrayBuffer());
  } else if (isAsyncIterableIterator2(value)) {
    for await (const chunk of value) {
      parts.push(chunk);
    }
  } else {
    throw new Error(
      `Unexpected data type: ${typeof value}; constructor: ${
        (_a3 = value == null ? void 0 : value.constructor) == null
          ? void 0
          : _a3.name
      }; props: ${propsForError2(value)}`
    );
  }
  return parts;
}
function propsForError2(value) {
  const props = Object.getOwnPropertyNames(value);
  return `[${props.map((p) => `"${p}"`).join(", ")}]`;
}
function getName2(value) {
  var _a3;
  return (
    getStringFromMaybeBuffer2(value.name) ||
    getStringFromMaybeBuffer2(value.filename) ||
    ((_a3 = getStringFromMaybeBuffer2(value.path)) == null
      ? void 0
      : _a3.split(/[\\/]/).pop())
  );
}
var getStringFromMaybeBuffer2 = (x) => {
  if (typeof x === "string") return x;
  if (typeof Buffer !== "undefined" && x instanceof Buffer) return String(x);
  return void 0;
};
var isAsyncIterableIterator2 = (value) =>
  value != null &&
  typeof value === "object" &&
  typeof value[Symbol.asyncIterator] === "function";
var isMultipartBody2 = (body) =>
  body &&
  typeof body === "object" &&
  body.body &&
  body[Symbol.toStringTag] === "MultipartBody";
var multipartFormRequestOptions2 = async (opts) => {
  const form = await createForm2(opts.body);
  return getMultipartRequestOptions2(form, opts);
};
var createForm2 = async (body) => {
  const form = new FormData3();
  await Promise.all(
    Object.entries(body || {}).map(([key, value]) =>
      addFormValue2(form, key, value)
    )
  );
  return form;
};
var addFormValue2 = async (form, key, value) => {
  if (value === void 0) return;
  if (value == null) {
    throw new TypeError(
      `Received null for "${key}"; to pass null in FormData, you must use the string 'null'`
    );
  }
  if (
    typeof value === "string" ||
    typeof value === "number" ||
    typeof value === "boolean"
  ) {
    form.append(key, String(value));
  } else if (isUploadable2(value)) {
    const file = await toFile3(value);
    form.append(key, file);
  } else if (Array.isArray(value)) {
    await Promise.all(
      value.map((entry) => addFormValue2(form, key + "[]", entry))
    );
  } else if (typeof value === "object") {
    await Promise.all(
      Object.entries(value).map(([name, prop]) =>
        addFormValue2(form, `${key}[${name}]`, prop)
      )
    );
  } else {
    throw new TypeError(
      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`
    );
  }
};

// node_modules/groq-sdk/core.mjs
var __classPrivateFieldSet4 = function (receiver, state, value, kind3, f) {
  if (kind3 === "m") throw new TypeError("Private method is not writable");
  if (kind3 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot write private member to an object whose class did not declare it"
    );
  return (
    kind3 === "a"
      ? f.call(receiver, value)
      : f
      ? (f.value = value)
      : state.set(receiver, value),
    value
  );
};
var __classPrivateFieldGet4 = function (receiver, state, kind3, f) {
  if (kind3 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (
    typeof state === "function"
      ? receiver !== state || !f
      : !state.has(receiver)
  )
    throw new TypeError(
      "Cannot read private member from an object whose class did not declare it"
    );
  return kind3 === "m"
    ? f
    : kind3 === "a"
    ? f.call(receiver)
    : f
    ? f.value
    : state.get(receiver);
};
var _AbstractPage_client2;
async function defaultParseResponse2(props) {
  const { response } = props;
  if (props.options.stream) {
    debug2(
      "response",
      response.status,
      response.url,
      response.headers,
      response.body
    );
    if (props.options.__streamClass) {
      return props.options.__streamClass.fromSSEResponse(
        response,
        props.controller
      );
    }
    return Stream2.fromSSEResponse(response, props.controller);
  }
  if (response.status === 204) {
    return null;
  }
  if (props.options.__binaryResponse) {
    return response;
  }
  const contentType = response.headers.get("content-type");
  const isJSON =
    (contentType == null ? void 0 : contentType.includes("application/json")) ||
    (contentType == null
      ? void 0
      : contentType.includes("application/vnd.api+json"));
  if (isJSON) {
    const json = await response.json();
    debug2("response", response.status, response.url, response.headers, json);
    return json;
  }
  const text = await response.text();
  debug2("response", response.status, response.url, response.headers, text);
  return text;
}
var APIPromise2 = class extends Promise {
  constructor(responsePromise, parseResponse = defaultParseResponse2) {
    super((resolve) => {
      resolve(null);
    });
    this.responsePromise = responsePromise;
    this.parseResponse = parseResponse;
  }
  _thenUnwrap(transform) {
    return new APIPromise2(this.responsePromise, async (props) =>
      transform(await this.parseResponse(props))
    );
  }
  asResponse() {
    return this.responsePromise.then((p) => p.response);
  }
  async withResponse() {
    const [data, response] = await Promise.all([
      this.parse(),
      this.asResponse(),
    ]);
    return { data, response };
  }
  parse() {
    if (!this.parsedPromise) {
      this.parsedPromise = this.responsePromise.then(this.parseResponse);
    }
    return this.parsedPromise;
  }
  then(onfulfilled, onrejected) {
    return this.parse().then(onfulfilled, onrejected);
  }
  catch(onrejected) {
    return this.parse().catch(onrejected);
  }
  finally(onfinally) {
    return this.parse().finally(onfinally);
  }
};
var APIClient2 = class {
  constructor({
    baseURL,
    maxRetries = 2,
    timeout = 6e4,
    httpAgent,
    fetch: overridenFetch,
  }) {
    this.baseURL = baseURL;
    this.maxRetries = validatePositiveInteger2("maxRetries", maxRetries);
    this.timeout = validatePositiveInteger2("timeout", timeout);
    this.httpAgent = httpAgent;
    this.fetch = overridenFetch != null ? overridenFetch : fetch3;
  }
  authHeaders(opts) {
    return {};
  }
  defaultHeaders(opts) {
    return {
      Accept: "application/json",
      "Content-Type": "application/json",
      "User-Agent": this.getUserAgent(),
      ...getPlatformHeaders2(),
      ...this.authHeaders(opts),
    };
  }
  validateHeaders(headers, customHeaders) {}
  defaultIdempotencyKey() {
    return `stainless-node-retry-${uuid42()}`;
  }
  get(path, opts) {
    return this.methodRequest("get", path, opts);
  }
  post(path, opts) {
    return this.methodRequest("post", path, opts);
  }
  patch(path, opts) {
    return this.methodRequest("patch", path, opts);
  }
  put(path, opts) {
    return this.methodRequest("put", path, opts);
  }
  delete(path, opts) {
    return this.methodRequest("delete", path, opts);
  }
  methodRequest(method, path, opts) {
    return this.request(
      Promise.resolve(opts).then((opts2) => ({ method, path, ...opts2 }))
    );
  }
  getAPIList(path, Page2, opts) {
    return this.requestAPIList(Page2, { method: "get", path, ...opts });
  }
  calculateContentLength(body) {
    if (typeof body === "string") {
      if (typeof Buffer !== "undefined") {
        return Buffer.byteLength(body, "utf8").toString();
      }
      if (typeof TextEncoder !== "undefined") {
        const encoder = new TextEncoder();
        const encoded = encoder.encode(body);
        return encoded.length.toString();
      }
    }
    return null;
  }
  buildRequest(options) {
    var _a3, _b, _c, _d, _e, _f;
    const { method, path, query, headers = {} } = options;
    const body = isMultipartBody2(options.body)
      ? options.body.body
      : options.body
      ? JSON.stringify(options.body, null, 2)
      : null;
    const contentLength = this.calculateContentLength(body);
    const url = this.buildURL(path, query);
    if ("timeout" in options)
      validatePositiveInteger2("timeout", options.timeout);
    const timeout = (_a3 = options.timeout) != null ? _a3 : this.timeout;
    const httpAgent =
      (_c = (_b = options.httpAgent) != null ? _b : this.httpAgent) != null
        ? _c
        : getDefaultAgent2(url);
    const minAgentTimeout = timeout + 1e3;
    if (
      typeof ((_d = httpAgent == null ? void 0 : httpAgent.options) == null
        ? void 0
        : _d.timeout) === "number" &&
      minAgentTimeout > ((_e = httpAgent.options.timeout) != null ? _e : 0)
    ) {
      httpAgent.options.timeout = minAgentTimeout;
    }
    if (this.idempotencyHeader && method !== "get") {
      if (!options.idempotencyKey)
        options.idempotencyKey = this.defaultIdempotencyKey();
      headers[this.idempotencyHeader] = options.idempotencyKey;
    }
    const reqHeaders = this.buildHeaders({ options, headers, contentLength });
    const req = {
      method,
      ...(body && { body }),
      headers: reqHeaders,
      ...(httpAgent && { agent: httpAgent }),
      signal: (_f = options.signal) != null ? _f : null,
    };
    return { req, url, timeout };
  }
  buildHeaders({ options, headers, contentLength }) {
    const reqHeaders = {};
    if (contentLength) {
      reqHeaders["content-length"] = contentLength;
    }
    const defaultHeaders = this.defaultHeaders(options);
    applyHeadersMut(reqHeaders, defaultHeaders);
    applyHeadersMut(reqHeaders, headers);
    if (isMultipartBody2(options.body) && kind2 !== "node") {
      delete reqHeaders["content-type"];
    }
    this.validateHeaders(reqHeaders, headers);
    return reqHeaders;
  }
  async prepareOptions(options) {}
  async prepareRequest(request4, { url, options }) {}
  parseHeaders(headers) {
    return !headers
      ? {}
      : Symbol.iterator in headers
      ? Object.fromEntries(Array.from(headers).map((header) => [...header]))
      : { ...headers };
  }
  makeStatusError(status, error, message, headers) {
    return APIError3.generate(status, error, message, headers);
  }
  request(options, remainingRetries = null) {
    return new APIPromise2(this.makeRequest(options, remainingRetries));
  }
  async makeRequest(optionsInput, retriesRemaining) {
    var _a3, _b, _c;
    const options = await optionsInput;
    if (retriesRemaining == null) {
      retriesRemaining =
        (_a3 = options.maxRetries) != null ? _a3 : this.maxRetries;
    }
    await this.prepareOptions(options);
    const { req, url, timeout } = this.buildRequest(options);
    await this.prepareRequest(req, { url, options });
    debug2("request", url, options, req.headers);
    if ((_b = options.signal) == null ? void 0 : _b.aborted) {
      throw new APIUserAbortError3();
    }
    const controller = new AbortController();
    const response = await this.fetchWithTimeout(
      url,
      req,
      timeout,
      controller
    ).catch(castToError2);
    if (response instanceof Error) {
      if ((_c = options.signal) == null ? void 0 : _c.aborted) {
        throw new APIUserAbortError3();
      }
      if (retriesRemaining) {
        return this.retryRequest(options, retriesRemaining);
      }
      if (response.name === "AbortError") {
        throw new APIConnectionTimeoutError3();
      }
      throw new APIConnectionError3({ cause: response });
    }
    const responseHeaders = createResponseHeaders2(response.headers);
    if (!response.ok) {
      if (retriesRemaining && this.shouldRetry(response)) {
        const retryMessage2 = `retrying, ${retriesRemaining} attempts remaining`;
        debug2(
          `response (error; ${retryMessage2})`,
          response.status,
          url,
          responseHeaders
        );
        return this.retryRequest(options, retriesRemaining, responseHeaders);
      }
      const errText = await response
        .text()
        .catch((e) => castToError2(e).message);
      const errJSON = safeJSON2(errText);
      const errMessage = errJSON ? void 0 : errText;
      const retryMessage = retriesRemaining
        ? `(error; no more retries left)`
        : `(error; not retryable)`;
      debug2(
        `response (error; ${retryMessage})`,
        response.status,
        url,
        responseHeaders,
        errMessage
      );
      const err = this.makeStatusError(
        response.status,
        errJSON,
        errMessage,
        responseHeaders
      );
      throw err;
    }
    return { response, options, controller };
  }
  requestAPIList(Page2, options) {
    const request4 = this.makeRequest(options, null);
    return new PagePromise2(this, request4, Page2);
  }
  buildURL(path, query) {
    const url = isAbsoluteURL2(path)
      ? new URL(path)
      : new URL(
          this.baseURL +
            (this.baseURL.endsWith("/") && path.startsWith("/")
              ? path.slice(1)
              : path)
        );
    const defaultQuery = this.defaultQuery();
    if (!isEmptyObj2(defaultQuery)) {
      query = { ...defaultQuery, ...query };
    }
    if (typeof query === "object" && query && !Array.isArray(query)) {
      url.search = this.stringifyQuery(query);
    }
    return url.toString();
  }
  stringifyQuery(query) {
    return Object.entries(query)
      .filter(([_, value]) => typeof value !== "undefined")
      .map(([key, value]) => {
        if (
          typeof value === "string" ||
          typeof value === "number" ||
          typeof value === "boolean"
        ) {
          return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
        }
        if (value === null) {
          return `${encodeURIComponent(key)}=`;
        }
        throw new GroqError(
          `Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`
        );
      })
      .join("&");
  }
  async fetchWithTimeout(url, init, ms, controller) {
    const { signal, ...options } = init || {};
    if (signal) signal.addEventListener("abort", () => controller.abort());
    const timeout = setTimeout(() => controller.abort(), ms);
    return this.getRequestClient()
      .fetch.call(void 0, url, { signal: controller.signal, ...options })
      .finally(() => {
        clearTimeout(timeout);
      });
  }
  getRequestClient() {
    return { fetch: this.fetch };
  }
  shouldRetry(response) {
    const shouldRetryHeader = response.headers.get("x-should-retry");
    if (shouldRetryHeader === "true") return true;
    if (shouldRetryHeader === "false") return false;
    if (response.status === 408) return true;
    if (response.status === 409) return true;
    if (response.status === 429) return true;
    if (response.status >= 500) return true;
    return false;
  }
  async retryRequest(options, retriesRemaining, responseHeaders) {
    var _a3;
    let timeoutMillis;
    const retryAfterMillisHeader =
      responseHeaders == null ? void 0 : responseHeaders["retry-after-ms"];
    if (retryAfterMillisHeader) {
      const timeoutMs = parseFloat(retryAfterMillisHeader);
      if (!Number.isNaN(timeoutMs)) {
        timeoutMillis = timeoutMs;
      }
    }
    const retryAfterHeader =
      responseHeaders == null ? void 0 : responseHeaders["retry-after"];
    if (retryAfterHeader && !timeoutMillis) {
      const timeoutSeconds = parseFloat(retryAfterHeader);
      if (!Number.isNaN(timeoutSeconds)) {
        timeoutMillis = timeoutSeconds * 1e3;
      } else {
        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();
      }
    }
    if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1e3)) {
      const maxRetries =
        (_a3 = options.maxRetries) != null ? _a3 : this.maxRetries;
      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(
        retriesRemaining,
        maxRetries
      );
    }
    await sleep2(timeoutMillis);
    return this.makeRequest(options, retriesRemaining - 1);
  }
  calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {
    const initialRetryDelay = 0.5;
    const maxRetryDelay = 8;
    const numRetries = maxRetries - retriesRemaining;
    const sleepSeconds = Math.min(
      initialRetryDelay * Math.pow(2, numRetries),
      maxRetryDelay
    );
    const jitter = 1 - Math.random() * 0.25;
    return sleepSeconds * jitter * 1e3;
  }
  getUserAgent() {
    return `${this.constructor.name}/JS ${VERSION2}`;
  }
};
var AbstractPage2 = class {
  constructor(client, response, body, options) {
    _AbstractPage_client2.set(this, void 0);
    __classPrivateFieldSet4(this, _AbstractPage_client2, client, "f");
    this.options = options;
    this.response = response;
    this.body = body;
  }
  hasNextPage() {
    const items = this.getPaginatedItems();
    if (!items.length) return false;
    return this.nextPageInfo() != null;
  }
  async getNextPage() {
    const nextInfo = this.nextPageInfo();
    if (!nextInfo) {
      throw new GroqError(
        "No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`."
      );
    }
    const nextOptions = { ...this.options };
    if ("params" in nextInfo && typeof nextOptions.query === "object") {
      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };
    } else if ("url" in nextInfo) {
      const params = [
        ...Object.entries(nextOptions.query || {}),
        ...nextInfo.url.searchParams.entries(),
      ];
      for (const [key, value] of params) {
        nextInfo.url.searchParams.set(key, value);
      }
      nextOptions.query = void 0;
      nextOptions.path = nextInfo.url.toString();
    }
    return await __classPrivateFieldGet4(
      this,
      _AbstractPage_client2,
      "f"
    ).requestAPIList(this.constructor, nextOptions);
  }
  async *iterPages() {
    let page = this;
    yield page;
    while (page.hasNextPage()) {
      page = await page.getNextPage();
      yield page;
    }
  }
  async *[((_AbstractPage_client2 = /* @__PURE__ */ new WeakMap()),
  Symbol.asyncIterator)]() {
    for await (const page of this.iterPages()) {
      for (const item of page.getPaginatedItems()) {
        yield item;
      }
    }
  }
};
var PagePromise2 = class extends APIPromise2 {
  constructor(client, request4, Page2) {
    super(
      request4,
      async (props) =>
        new Page2(
          client,
          props.response,
          await defaultParseResponse2(props),
          props.options
        )
    );
  }
  async *[Symbol.asyncIterator]() {
    const page = await this;
    for await (const item of page) {
      yield item;
    }
  }
};
var createResponseHeaders2 = (headers) => {
  return new Proxy(Object.fromEntries(headers.entries()), {
    get(target, name) {
      const key = name.toString();
      return target[key.toLowerCase()] || target[key];
    },
  });
};
var getPlatformProperties2 = () => {
  if (typeof Deno !== "undefined" && Deno.build != null) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION2,
      "X-Stainless-OS": normalizePlatform2(Deno.build.os),
      "X-Stainless-Arch": normalizeArch2(Deno.build.arch),
      "X-Stainless-Runtime": "deno",
      "X-Stainless-Runtime-Version": Deno.version,
    };
  }
  if (typeof EdgeRuntime !== "undefined") {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION2,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": `other:${EdgeRuntime}`,
      "X-Stainless-Runtime": "edge",
      "X-Stainless-Runtime-Version": process.version,
    };
  }
  if (
    Object.prototype.toString.call(
      typeof process !== "undefined" ? process : 0
    ) === "[object process]"
  ) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION2,
      "X-Stainless-OS": normalizePlatform2(process.platform),
      "X-Stainless-Arch": normalizeArch2(process.arch),
      "X-Stainless-Runtime": "node",
      "X-Stainless-Runtime-Version": process.version,
    };
  }
  const browserInfo = getBrowserInfo2();
  if (browserInfo) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION2,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": "unknown",
      "X-Stainless-Runtime": `browser:${browserInfo.browser}`,
      "X-Stainless-Runtime-Version": browserInfo.version,
    };
  }
  return {
    "X-Stainless-Lang": "js",
    "X-Stainless-Package-Version": VERSION2,
    "X-Stainless-OS": "Unknown",
    "X-Stainless-Arch": "unknown",
    "X-Stainless-Runtime": "unknown",
    "X-Stainless-Runtime-Version": "unknown",
  };
};
function getBrowserInfo2() {
  if (typeof navigator === "undefined" || !navigator) {
    return null;
  }
  const browserPatterns = [
    { key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    {
      key: "safari",
      pattern:
        /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/,
    },
  ];
  for (const { key, pattern } of browserPatterns) {
    const match = pattern.exec(navigator.userAgent);
    if (match) {
      const major = match[1] || 0;
      const minor = match[2] || 0;
      const patch = match[3] || 0;
      return { browser: key, version: `${major}.${minor}.${patch}` };
    }
  }
  return null;
}
var normalizeArch2 = (arch) => {
  if (arch === "x32") return "x32";
  if (arch === "x86_64" || arch === "x64") return "x64";
  if (arch === "arm") return "arm";
  if (arch === "aarch64" || arch === "arm64") return "arm64";
  if (arch) return `other:${arch}`;
  return "unknown";
};
var normalizePlatform2 = (platform) => {
  platform = platform.toLowerCase();
  if (platform.includes("ios")) return "iOS";
  if (platform === "android") return "Android";
  if (platform === "darwin") return "MacOS";
  if (platform === "win32") return "Windows";
  if (platform === "freebsd") return "FreeBSD";
  if (platform === "openbsd") return "OpenBSD";
  if (platform === "linux") return "Linux";
  if (platform) return `Other:${platform}`;
  return "Unknown";
};
var _platformHeaders2;
var getPlatformHeaders2 = () => {
  return _platformHeaders2 != null
    ? _platformHeaders2
    : (_platformHeaders2 = getPlatformProperties2());
};
var safeJSON2 = (text) => {
  try {
    return JSON.parse(text);
  } catch (err) {
    return void 0;
  }
};
var startsWithSchemeRegexp2 = new RegExp("^(?:[a-z]+:)?//", "i");
var isAbsoluteURL2 = (url) => {
  return startsWithSchemeRegexp2.test(url);
};
var sleep2 = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
var validatePositiveInteger2 = (name, n) => {
  if (typeof n !== "number" || !Number.isInteger(n)) {
    throw new GroqError(`${name} must be an integer`);
  }
  if (n < 0) {
    throw new GroqError(`${name} must be a positive integer`);
  }
  return n;
};
var castToError2 = (err) => {
  if (err instanceof Error) return err;
  return new Error(err);
};
var readEnv2 = (env) => {
  var _a3, _b, _c, _d, _e, _f;
  if (typeof process !== "undefined") {
    return (_c =
      (_b = (_a3 = process.env) == null ? void 0 : _a3[env]) == null
        ? void 0
        : _b.trim()) != null
      ? _c
      : void 0;
  }
  if (typeof Deno !== "undefined") {
    return (_f =
      (_e = (_d = Deno.env) == null ? void 0 : _d.get) == null
        ? void 0
        : _e.call(_d, env)) == null
      ? void 0
      : _f.trim();
  }
  return void 0;
};
function isEmptyObj2(obj) {
  if (!obj) return true;
  for (const _k in obj) return false;
  return true;
}
function hasOwn2(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function applyHeadersMut(targetHeaders, newHeaders) {
  for (const k in newHeaders) {
    if (!hasOwn2(newHeaders, k)) continue;
    const lowerKey = k.toLowerCase();
    if (!lowerKey) continue;
    const val = newHeaders[k];
    if (val === null) {
      delete targetHeaders[lowerKey];
    } else if (val !== void 0) {
      targetHeaders[lowerKey] = val;
    }
  }
}
function debug2(action, ...args) {
  if (typeof process !== "undefined" && process.env["DEBUG"] === "true") {
    console.log(`Groq:DEBUG:${action}`, ...args);
  }
}
var uuid42 = () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = (Math.random() * 16) | 0;
    const v = c === "x" ? r : (r & 3) | 8;
    return v.toString(16);
  });
};
var isRunningInBrowser2 = () => {
  return (
    typeof window !== "undefined" &&
    typeof window.document !== "undefined" &&
    typeof navigator !== "undefined"
  );
};

// node_modules/groq-sdk/resource.mjs
var APIResource2 = class {
  constructor(client) {
    this._client = client;
  }
};

// node_modules/groq-sdk/resources/chat/completions.mjs
var Completions4 = class extends APIResource2 {
  create(body, options) {
    var _a3;
    return this._client.post("/openai/v1/chat/completions", {
      body,
      ...options,
      stream: (_a3 = body.stream) != null ? _a3 : false,
    });
  }
};
(function (Completions5) {})(Completions4 || (Completions4 = {}));

// node_modules/groq-sdk/resources/chat/chat.mjs
var Chat3 = class extends APIResource2 {
  constructor() {
    super(...arguments);
    this.completions = new Completions4(this._client);
  }
};
(function (Chat4) {
  Chat4.Completions = Completions4;
})(Chat3 || (Chat3 = {}));

// node_modules/groq-sdk/resources/models.mjs
var Models2 = class extends APIResource2 {
  retrieve(model, options) {
    return this._client.get(`/openai/v1/models/${model}`, options);
  }
  list(options) {
    return this._client.get("/openai/v1/models", options);
  }
  delete(model, options) {
    return this._client.delete(`/openai/v1/models/${model}`, {
      ...options,
      headers: {
        Accept: "*/*",
        ...(options == null ? void 0 : options.headers),
      },
    });
  }
};
(function (Models3) {})(Models2 || (Models2 = {}));

// node_modules/groq-sdk/resources/audio/transcriptions.mjs
var Transcriptions2 = class extends APIResource2 {
  create(body, options) {
    return this._client.post(
      "/openai/v1/audio/transcriptions",
      multipartFormRequestOptions2({ body, ...options })
    );
  }
};
(function (Transcriptions3) {})(Transcriptions2 || (Transcriptions2 = {}));

// node_modules/groq-sdk/resources/audio/translations.mjs
var Translations2 = class extends APIResource2 {
  create(body, options) {
    return this._client.post(
      "/openai/v1/audio/translations",
      multipartFormRequestOptions2({ body, ...options })
    );
  }
};
(function (Translations3) {})(Translations2 || (Translations2 = {}));

// node_modules/groq-sdk/resources/audio/audio.mjs
var Audio2 = class extends APIResource2 {
  constructor() {
    super(...arguments);
    this.transcriptions = new Transcriptions2(this._client);
    this.translations = new Translations2(this._client);
  }
};
(function (Audio3) {
  Audio3.Transcriptions = Transcriptions2;
  Audio3.Translations = Translations2;
})(Audio2 || (Audio2 = {}));

// node_modules/groq-sdk/index.mjs
var _a2;
var Groq = class extends APIClient2 {
  constructor({
    baseURL = readEnv2("GROQ_BASE_URL"),
    apiKey = readEnv2("GROQ_API_KEY"),
    ...opts
  } = {}) {
    var _a3;
    if (apiKey === void 0) {
      throw new GroqError(
        "The GROQ_API_KEY environment variable is missing or empty; either provide it, or instantiate the Groq client with an apiKey option, like new Groq({ apiKey: 'My API Key' })."
      );
    }
    const options = {
      apiKey,
      ...opts,
      baseURL: baseURL || `https://api.groq.com`,
    };
    if (!options.dangerouslyAllowBrowser && isRunningInBrowser2()) {
      throw new GroqError(
        "This is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew Groq({ dangerouslyAllowBrowser: true })"
      );
    }
    super({
      baseURL: options.baseURL,
      timeout: (_a3 = options.timeout) != null ? _a3 : 6e4,
      httpAgent: options.httpAgent,
      maxRetries: options.maxRetries,
      fetch: options.fetch,
    });
    this.chat = new Chat3(this);
    this.audio = new Audio2(this);
    this.models = new Models2(this);
    this._options = options;
    this.apiKey = apiKey;
  }
  defaultQuery() {
    return this._options.defaultQuery;
  }
  defaultHeaders(opts) {
    return {
      ...super.defaultHeaders(opts),
      ...this._options.defaultHeaders,
    };
  }
  authHeaders(opts) {
    return { Authorization: `Bearer ${this.apiKey}` };
  }
};
_a2 = Groq;
Groq.Groq = _a2;
Groq.GroqError = GroqError;
Groq.APIError = APIError3;
Groq.APIConnectionError = APIConnectionError3;
Groq.APIConnectionTimeoutError = APIConnectionTimeoutError3;
Groq.APIUserAbortError = APIUserAbortError3;
Groq.NotFoundError = NotFoundError3;
Groq.ConflictError = ConflictError3;
Groq.RateLimitError = RateLimitError3;
Groq.BadRequestError = BadRequestError3;
Groq.AuthenticationError = AuthenticationError3;
Groq.InternalServerError = InternalServerError3;
Groq.PermissionDeniedError = PermissionDeniedError3;
Groq.UnprocessableEntityError = UnprocessableEntityError3;
var {
  GroqError: GroqError2,
  APIError: APIError4,
  APIConnectionError: APIConnectionError4,
  APIConnectionTimeoutError: APIConnectionTimeoutError4,
  APIUserAbortError: APIUserAbortError4,
  NotFoundError: NotFoundError4,
  ConflictError: ConflictError4,
  RateLimitError: RateLimitError4,
  BadRequestError: BadRequestError4,
  AuthenticationError: AuthenticationError4,
  InternalServerError: InternalServerError4,
  PermissionDeniedError: PermissionDeniedError4,
  UnprocessableEntityError: UnprocessableEntityError4,
} = error_exports2;
(function (Groq2) {
  Groq2.toFile = toFile3;
  Groq2.fileFromPath = fileFromPath2;
  Groq2.Chat = Chat3;
  Groq2.Audio = Audio2;
  Groq2.Models = Models2;
})(Groq || (Groq = {}));

// src/main.ts
var affinityAPIKey = "";
var openaiAPIKey = "";
var groqAPIKey = "";
var owner_value = "10";
var connection_owner_field = "10";
var venture_network_list = "500";
var investor_names = [];
var fireflies_api_key = "";
var tracxn_api_key = "";
var intervalId;
var openai;
var groq;
var gpt_3_latest = "gpt-3.5-turbo";
var gpt_4_latest2 = "gpt-4-turbo";
var DEFAULT_SETTINGS = {
  affinityKey: "default",
  openAIKey: "default",
  groqAIKey: "default",
  owner_person_value: "10",
  connection_owner_field_id: "100",
  venture_network_list_id: "500",
  team_names: "Ben Horrowitz, Vinod Khosla",
  fireflies_api: "default",
  tracxn_api: "default",
};
async function openai_js(
  model_name,
  user_prompt,
  system_prompt,
  max_tokens = 256,
  temperature = 0.3,
  isStreaming = false
) {
  const response = await openai.chat.completions.create({
    model: model_name,
    temperature,
    max_tokens,
    stream: isStreaming,
    messages: [
      { role: "system", content: system_prompt },
      { role: "user", content: user_prompt },
    ],
  });
  if (!isStreaming) {
    let summary = response.choices[0].message.content;
    if (summary == null) {
      summary = "";
    }
    return summary;
  } else {
    return response;
  }
}
async function openai_js_multiturn(
  queries,
  system_prompt,
  is_groq,
  max_tokens = 256,
  temperature = 0.3
) {
  const system_message = system_prompt;
  let messages = [{ role: "system", content: system_message }];
  let replies = [];
  for (let query of queries) {
    messages.push({ role: "user", content: query });
    console.log(messages);
    var response;
    if (!is_groq) {
      response = await openai.chat.completions.create({
        model: gpt_4_latest2,
        temperature,
        max_tokens,
        messages,
      });
    } else {
      response = await groq.chat.completions.create({
        messages,
        model: "llama3-70b-8192",
      });
    }
    let assistant_reply = response.choices[0].message.content;
    if (assistant_reply == null) {
      assistant_reply = "";
    }
    messages.push({ role: "assistant", content: assistant_reply });
    replies.push(assistant_reply);
  }
  return replies;
}
async function summarize_vc_text(text) {
  let [title, substrings] = extract_title_and_note(text);
  let hashtags;
  try {
    hashtags = substrings[0].split("Tags:")[1];
  } catch (e) {
    hashtags = substrings[0];
    new import_obsidian4.Notice(
      `${title}: Does not have any guiding hashtags, this could help the summarizer understand the VC better`,
      3600
    );
  }
  let text_to_summarize = hashtags + "\n" + substrings[1];
  console.log(`Summarizing: ${title}`);
  const system_prompt =
    "You are a summarizer for my notes about VC Funds. Your job is to read through my notes and create a summary in the following schema:\n- Fund Size::<How big is the fund?>\n- Ticket Size::<How much does the fund invest per startup?>\n- Geography::<Where can the fund invest?>\n- Stage:: <Pre-seed, Seed, Series A, etc>\n- Industry::<In which industries does the fund invest?>\n- Special::<Any special information about the fund or the investor that I should remember>";
  const summary = await openai_js(
    gpt_4_latest2,
    "Notes:\n" + text_to_summarize,
    system_prompt
  );
  let new_summary = String(summary);
  title = title.toString();
  let leading_text = "";
  let replacement = "";
  let tailing_text = "";
  if (substrings) {
    leading_text = substrings[0] + "\n" + title + "\n";
    for (let substring of substrings.slice(1)) {
      tailing_text = tailing_text + "\n" + substring;
    }
    replacement =
      leading_text +
      "#gpt_summarized, #review \n" +
      new_summary +
      "\n# Stop Indexing \n## Notes\n" +
      tailing_text;
    return [replacement, new_summary, title];
  } else {
    return [text, text, ""];
  }
}
async function summarize_paragraph(paragraph) {
  var response;
  response = await openai.chat.completions.create({
    model: "gpt-4-1106-preview",
    messages: [
      {
        role: "system",
        content:
          'You are a helpful note-taking assistant for a venture capital investor. You will be given a part of a transcript for the call between the investor and the startup founders. Your task is to extract information covering the following aspects:\n- **Team**:<Who is the team behind the startup. Answer in bullet points!>\n- **Problem**:<What is the problem the startup is solving and for whom. Answer in bullet points!>\n- **Product**:<How does their product solve this problem. Answer in bullet points!>\n- **Traction**:<How does their customer traction look like. Answer in bullet points!>\n- **Competition**:<How does the competitive landscape look like. Answer in bullet points!>\n- **Round Info**:<How much money are they raising from investors currently? How much have they raised before? Answer in bullet points!>\n- **Other**: <Other important points about the founders OR the startup that do not fit in the above sections. Answer in bullet points!>\n\nFor every section, always give your answers in bullet points! Otherwise, say "No Relevant Information"',
      },
      {
        role: "user",
        content: `${paragraph}`,
      },
    ],
    temperature: 0,
    max_tokens: 1024,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
  });
  let reply = response.choices[0].message.content;
  console.log(reply);
  if (reply == null) {
    reply = "";
  }
  return reply;
}
async function summarize_all_paragraphs_together(paragraphs) {
  let input_text = "";
  for (let i = 0; i < paragraphs.length; i++) {
    input_text += `Summary #${i + 1}:
`;
    input_text += paragraphs[i] + "\n\n";
  }
  var response;
  response = await openai.chat.completions.create({
    model: "gpt-4-1106-preview",
    messages: [
      {
        role: "system",
        content: `You are a helpful assistant. Your task is to expand the first summary you are given by the information in all the subsequent summaries. The final summary you provide should cover ALL following sections:
- **Team**: <Who is the team behind the startup>
- **Problem**: <What is the problem the startup is solving and for whom>
- **Product**: <How does their product solve this problem>
- **Traction**: <How does their customer traction look like>
- **Competition**: <How does the competitive landscape look like>
- **Round Info**: <How much money are they raising from investors currently? How much have they raised before?>
- **Other**: <Other important points about the founders OR the startup that do not fit in the above sections>

Do not leave any empty sections. For every section always give your answers in bullet points! Otherwise say "No Relevant Information" infront of the section's name.`,
      },
      {
        role: "user",
        content: `${input_text}`,
      },
    ],
    temperature: 0,
    max_tokens: 2048,
    top_p: 1,
    frequency_penalty: 0,
    presence_penalty: 0,
  });
  let reply = response.choices[0].message.content;
  if (reply == null) {
    reply = "";
  }
  return reply;
}
function extractHeadersFromNotes(notes) {
  const headerRegex = /^#+\s+.+$/gm;
  const headers = [];
  let match;
  while ((match = headerRegex.exec(notes)) !== null) {
    headers.push(match[0]);
  }
  return headers;
}
function findLineNumber(fileText, searchString, startLine) {
  const fileContent = fileText;
  const lines = fileContent.split("\n");
  for (let i = startLine; i < lines.length; i++) {
    if (lines[i].includes(searchString)) {
      return [i, lines[i]];
    }
  }
  return [null, null];
}
function getStartHeader(update_type) {
  let startHeader = "";
  if (update_type.toLowerCase() == "team") {
    startHeader = "#### Team";
  } else if (update_type.toLowerCase() == "ideal customer profile") {
    startHeader = "#### Problem";
  } else if (update_type.toLowerCase() == "product") {
    startHeader = "#### Product";
  } else if (update_type.toLowerCase() == "competition") {
    startHeader = "#### Competition";
  } else if (
    update_type.toLowerCase() == "commercial traction" ||
    update_type.toLowerCase() == "market size"
  ) {
    startHeader = "#### Traction";
  } else if (update_type.toLowerCase() == "funding") {
    startHeader = "#### Round Info";
  }
  return startHeader;
}
function getCursorRange(fileText, startHeader, editor, allHeaders) {
  let startLineNumber;
  let matchedHeader;
  [startLineNumber, matchedHeader] = findLineNumber(fileText, startHeader, 0);
  console.log(`Matched Header: ${matchedHeader}`);
  console.log(`Found in line: ${startLineNumber}`);
  let startCursorPosition = null;
  let endCursorPosition = null;
  if (startLineNumber) {
    editor.setCursor(startLineNumber);
    startCursorPosition = editor.getCursor();
    let endLineNumber;
    let endMatchedHeader;
    endLineNumber = editor.lastLine();
    if (allHeaders.indexOf(matchedHeader) < allHeaders.length - 1) {
      let nextHeader = allHeaders[allHeaders.indexOf(matchedHeader) + 1];
      [endLineNumber, endMatchedHeader] = findLineNumber(
        fileText,
        nextHeader,
        startLineNumber
      );
      console.log(`Matched Next Header: ${nextHeader}`);
      console.log(`Found in line: ${endLineNumber}`);
    }
    if (endLineNumber) {
      endLineNumber -= 1;
      editor.setCursor(endLineNumber);
      endCursorPosition = editor.getCursor();
    }
  }
  return [startCursorPosition, endCursorPosition, matchedHeader];
}
async function update_affinity_startup(startup_name, note) {
  let startup;
  try {
    startup = await get_startup_by_name(
      affinityAPIKey,
      owner_value,
      startup_name
    );
  } catch (e) {
    new import_obsidian4.Notice(`Can not establish connection with Affinity`);
    return;
  }
  if (startup) {
    let response = await add_notes_to_company(startup, note, affinityAPIKey);
    if (response == null) {
      new import_obsidian4.Notice(
        `Startup: ${startup_name} was NOT updated on Affinity`
      );
      return false;
    } else {
      new import_obsidian4.Notice(
        `Startup: ${startup_name} was updated on Affinity`
      );
      return true;
    }
  } else {
    new import_obsidian4.Notice(
      `Startup: ${startup_name} was NOT found on Affinity`
    );
    return false;
  }
}
function find_the_nearest_header(searchString, fileText) {
  let lineOfString, fullSearchString;
  [lineOfString, fullSearchString] = findLineNumber(fileText, searchString, 0);
  const headerRegex = /^#+\s+.+$/gm;
  const lines = fileText.split("\n");
  for (let i = lineOfString; i >= 0; i--) {
    let match;
    if ((match = headerRegex.exec(lines[i])) != null) {
      console.log(`Nearest header to: ${searchString} is ${match[0]}`);
      return match[0];
    }
  }
  console.log(`Can not find nearest string for: ${searchString}`);
  return "";
}
async function find_competitors_through_tracxn(
  domain,
  isPublic,
  isAcquired,
  companies_per_request
) {
  const requestUrl = "https://tracxn.com/api/2.2/companies";
  const accessToken = tracxn_api_key;
  let results;
  try {
    let requestBody = {
      filter: {
        competitorOf: [domain],
        isFunded: true,
      },
      size: companies_per_request,
    };
    if (isAcquired) {
      requestBody["filter"]["companyStage"] = "Acquired";
    } else if (isPublic) {
      requestBody["filter"]["companyStage"] = "Public";
    }
    const response = await (0, import_obsidian4.request)({
      url: requestUrl,
      method: "POST",
      headers: { "Content-Type": "application/json", accessToken },
      body: JSON.stringify(requestBody),
    });
    const result = await JSON.parse(response);
    console.log(result);
    results = result["result"];
  } catch (error) {
    console.error(error);
    return [];
  }
  return results;
}
var VCCopilotPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new VCCopilotSettingsTab(this.app, this));
    this.status = this.addStatusBarItem();
    this.addCommand({
      id: "summarize-startup-command",
      name: "Summarize This Startup",
      editorCallback: (editor, view) =>
        this.summarize_selected_startup_text(editor, view, this.status),
    });
    this.addCommand({
      id: "reformat-and-update-master-note",
      name: "Reformat & Update Master Note",
      editorCallback: (editor, view) =>
        this.reformat_and_update_master_note(editor),
    });
    this.addCommand({
      id: "reformat-notes",
      name: "Reformat Notes",
      editorCallback: (editor, view) => this.reformat_notes(editor),
    });
    this.addCommand({
      id: "update-master-note",
      name: "Update Master Note",
      editorCallback: (editor, view) =>
        this.update_master_note_with_selected_text(editor),
    });
    this.addCommand({
      id: "affinity-startup",
      name: "Push Startups to Affinity",
      callback: () => this.push_startups_to_affinity(this.status),
    });
    this.addCommand({
      id: "summarize-all-vc-command",
      name: "Summarize All VC Notes",
      callback: () => this.summarize_all_vc(this.status),
    });
    this.addCommand({
      id: "affinity-vc",
      name: "Push VCs to Affinity",
      callback: () => this.push_vcs_to_affinity(this.status),
    });
    this.addCommand({
      id: "startup-defensibility",
      name: "Evaluate Startup Defensibility",
      editorCallback: (editor) => {
        const inputModal = new TextInputModal(
          this.app,
          "defensibility",
          (input) => {
            console.log("Submitted text:", input);
            this.defensibility_analysis(input, editor);
          }
        );
        inputModal.open();
      },
    });
    this.addCommand({
      id: "startup-workflow",
      name: "Startup Guidance Workflow",
      editorCallback: (editor) => {
        const inputModal = new WorkflowModal(this.app, (input) => {
          console.log("Submitted text:", input);
          let result = input.split("//-- ");
          let desc = result[0];
          let isGroq = result[1].trim() == "true" ? true : false;
          console.log(`isGroq: ${isGroq}`);
          this.guidance_workflow(desc, isGroq, editor);
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "market-research-command",
      name: "Market Research",
      editorCallback: (editor) => {
        const inputModal = new TextInputModal(
          this.app,
          "market-research",
          (input) => {
            console.log("Submitted text:", input);
            this.market_research(input, editor);
          }
        );
        inputModal.open();
      },
    });
    this.addCommand({
      id: "url-research-command",
      name: "Url Research",
      editorCallback: (editor) => {
        const inputModal = new TextInputModal(
          this.app,
          "url-research",
          (input) => {
            console.log("Submitted text:", input);
            this.url_research(input, editor);
          }
        );
        inputModal.open();
      },
    });
    this.addCommand({
      id: "competition-research-command",
      name: "Competition Research",
      editorCallback: (editor) => {
        const inputModal = new TextInputModal(
          this.app,
          "competition",
          (input) => {
            console.log("Submitted text:", input);
            this.competition_research(input, editor);
          }
        );
        inputModal.open();
      },
    });
    this.addCommand({
      id: "deck-analysis",
      name: "Summarize Pitch Deck",
      editorCallback: (editor) => {
        const inputModal = new PDFModal(this.app, (selected_file) => {
          new import_obsidian4.Notice(`Selected: '${selected_file}`);
          this.analyze_pitch_deck(selected_file, editor);
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "custom-research",
      name: "Custom Research",
      editorCallback: (editor) => {
        const inputModal = new MultipleTextInputModal(this.app, "", (input) => {
          let result = input.split(", ");
          let website = result[0];
          let query = result[1];
          let task = result[2];
          console.log("Submitted text:", input);
          this.custom_search(task, website, query, editor);
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "find-investors",
      name: "Find Investors For A Startup",
      editorCallback: (editor) => {
        const inputModal = new FindInvestorModal(this.app, (input) => {
          let result = input.split(", ");
          let company = result[0];
          let stage = result[1];
          let location = result[2];
          console.log("Submitted text:", input);
          this.find_investors_for_startup(company, stage, location, editor);
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "tracxn-competitor-overview",
      name: "Competitor Overview Through Tracxn",
      editorCallback: (editor) => {
        const inputModal = new TracxnModal(this.app, (input) => {
          let result = input.split(", ");
          let company = result[0];
          let isIPO = result[1].trim() == "true" ? true : false;
          let isAcquired = result[2].trim() == "true" ? true : false;
          let companies_per_request = parseInt(result[3].trim());
          console.log("Submitted text:");
          console.log(company);
          console.log(isIPO);
          console.log(isAcquired);
          console.log(companies_per_request);
          this.tracxn(
            company,
            isIPO,
            isAcquired,
            companies_per_request,
            editor
          );
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "fireflies-summary",
      name: "Fireflies Call Summary",
      editorCallback: (editor) => {
        const inputModal = new TextInputModal(
          this.app,
          "fireflies-summary",
          (input) => {
            console.log("Submitted text:", input);
            this.fireflies_summary(input, editor);
          }
        );
        inputModal.open();
      },
    });
    this.addCommand({
      id: "fireflies-summary-temp",
      name: "Fireflies Text Summary (Temp)",
      editorCallback: (editor) => {
        const inputModal = new FireFliesTemp(this.app, (input) => {
          console.log("Submitted text:", input);
          let result = input.split("&&& ");
          let json_string = result[0];
          let meeting_name = result[1];
          this.fireflies_summary_temp(json_string, meeting_name, editor);
        });
        inputModal.open();
      },
    });
    this.addCommand({
      id: "summarise-spoke-meeting",
      name: "Spoke Call Summary",
      editorCallback: (editor) => {
        const inputModal = new SpokeModal(this.app, (input) => {
          console.log("Submitted text:", input);
          let result = input.split(", ");
          let meeting_name = result[0];
          let isDetailed = result[1].trim() == "true" ? true : false;
          this.summarize_spoke_meeting(editor, meeting_name, isDetailed);
        });
        inputModal.open();
      },
    });
    openai = new openai_default({
      apiKey: openaiAPIKey,
      dangerouslyAllowBrowser: true,
    });
    groq = new Groq({
      apiKey: groqAPIKey,
      dangerouslyAllowBrowser: true,
    });
    console.log(`Groq API: ${groqAPIKey}`);
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot loading....");
    this.status.setAttr("title", "VC Copilot is loading...");
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    this.status.setAttr("title", "VC Copilot is ready");
  }
  onunload() {
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot left");
    this.status.setAttr("title", "VC Copilot says \u{1F44B}");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    openaiAPIKey = this.settings.openAIKey;
    groqAPIKey = this.settings.groqAIKey;
    affinityAPIKey = this.settings.affinityKey;
    owner_value = this.settings.owner_person_value;
    connection_owner_field = this.settings.connection_owner_field_id;
    venture_network_list = this.settings.venture_network_list_id;
    fireflies_api_key = this.settings.fireflies_api;
    tracxn_api_key = this.settings.tracxn_api;
    this.settings.team_names.split(",").forEach((element) => {
      investor_names.push(element.trim());
    });
  }
  async saveSettings() {
    await this.saveData(this.settings);
    openaiAPIKey = this.settings.openAIKey;
    groqAPIKey = this.settings.groqAIKey;
    affinityAPIKey = this.settings.affinityKey;
    owner_value = this.settings.owner_person_value;
    connection_owner_field = this.settings.connection_owner_field_id;
    venture_network_list = this.settings.venture_network_list_id;
    fireflies_api_key = this.settings.fireflies_api;
    tracxn_api_key = this.settings.tracxn_api;
    this.settings.team_names.split(",").forEach((element) => {
      investor_names.push(element.trim());
    });
  }
  async tracxn(company, isIPO, isAcquired, companies_per_request, editor) {
    let all_startups = await find_competitors_through_tracxn(
      company,
      isIPO,
      isAcquired,
      companies_per_request
    );
    const specialFormat = true;
    let all_startups_details = [];
    for (let startup of all_startups) {
      let startup_details = extract_startup_details(startup);
      let acquisition_details = {};
      if (isIPO) {
        acquisition_details = get_ipo_details(startup);
      } else if (isAcquired) {
        acquisition_details = get_acquisition_details(startup);
      }
      let mergedDetails = { ...startup_details, ...acquisition_details };
      all_startups_details.push(mergedDetails);
    }
    let table = formatObjectsToMarkdownTable(
      all_startups_details,
      specialFormat
    );
    let relevant_feeds = get_relevant_feeds(all_startups);
    let feed_text =
      '##### Tracxn Feed of Competitors for Deeper dive\n> Notice that the "feed" is the first part in the path\n\n';
    for (let [fullpath, link] of Object.entries(relevant_feeds)) {
      feed_text += `- [${fullpath}](${link})
`;
    }
    let header = `#### Tracxn Competitive Overview for ${company}
`;
    if (isIPO) {
      header = `#### IPOed Competition for ${company}
`;
    } else if (isAcquired) {
      header = `#### Acquired Competition for ${company}
`;
    }
    let final_text = header + table + "\n\n" + feed_text;
    let position = editor.getCursor();
    this.displaymessage(final_text, editor, position);
  }
  async get_all_investors() {
    let all_files = this.app.vault.getMarkdownFiles();
    let connected_investors_files = [];
    for (let file of all_files) {
      let text = await this.app.vault.read(file);
      if (text.includes("#network/connected") && text.includes("#Person/VC")) {
        connected_investors_files.push({ text, name: file.basename });
      }
    }
    return connected_investors_files;
  }
  async find_investors_for_startup(company, stage, location, editor) {
    new import_obsidian4.Notice("Finding best investors...");
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680}: VC Copilot searching for best investors..."
    );
    this.status.setAttr("title", "Copilot is searching for best investors...");
    let position = editor.getCursor();
    let connected_investors = await this.get_all_investors();
    let connected_investors_json = [];
    for (let [i, connected_investor] of Object.entries(connected_investors)) {
      let name = connected_investor["name"];
      let text = connected_investor["text"];
      connected_investors_json.push(generate_investor_json(name, text));
    }
    let fit_investors = find_eligible_investors(
      connected_investors_json,
      location,
      stage
    );
    console.log(`We found ${fit_investors.length} suitable investors`);
    let matching_prompt = format_matching_prompt(fit_investors, company);
    console.log(`Matching Prompt:
${matching_prompt}

--------------------------------

`);
    let system_prompt =
      "You are an expert matchmaker who always find the most suitable investors for a startup. You are very thorough in your analysis.";
    let loadingInterval = this.create_loading_interval(
      "Finding best investors"
    );
    let result = await openai_js(
      gpt_4_latest2,
      matching_prompt,
      system_prompt,
      4096
    );
    console.log(`AI Reply:
${result}

-----------------------------------------

`);
    let investors_text = extractInvestorsText(result);
    let reasoning_text = extractResoningText(result);
    console.log(investors_text);
    let investors_text_array = investors_text
      .split(",")
      .map((item) => item.trim());
    let message = "#### Most suitable investors\n";
    let investors_message = "";
    for (let investor of investors_text_array) {
      investors_message += "- [[" + investor + "]]\n";
      let reason_for_investor = extractTextToEndOfLine(
        reasoning_text,
        investor
      );
      if (
        (reason_for_investor == null ? void 0 : reason_for_investor.at(0)) ==
        ":"
      ) {
        reason_for_investor = reason_for_investor.replace(":", "");
      }
      reason_for_investor = reason_for_investor.trim();
      investors_message += `	- (${reason_for_investor})
`;
    }
    message += investors_message;
    let extra_text = "";
    try {
      message +=
        "\n\n##### Generally suitable investors based on geo and stage\n";
      for (let investor of fit_investors) {
        extra_text += "- [[" + investor["name"] + "]]\n";
      }
    } catch (e) {
      console.log("Error in extracting extra investors");
    }
    message += extra_text;
    console.log(message);
    message += `

##### Full Reasoning
${reasoning_text}`;
    this.displaymessage(message, editor, position);
    clearInterval(loadingInterval);
  }
  async summarize_selected_startup_text(editor, view, status) {
    const sel = editor.getSelection();
    new import_obsidian4.Notice("Summarizing...");
    status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot summarizing...");
    status.setAttr("title", "Copilot is summarizing...");
    const system_prompt =
      "You are a summarizer for my notes about startups. Your job is to read through my notes and create a summary in the following schema:\n- **Team**:<the founder team behind the startup>\n\n- **Product**:<the product and the problem it solves>\n\n- **Traction**:<how much revenue has the startup generated so far, how many customers do they have>\n\n- **Round**:<how much money have they raised so far at what terms. How much money are they raising now>";
    let new_summary = await openai_js(gpt_4_latest2, sel, system_prompt);
    const replacement =
      "#gpt_summarized, #AddHashtags, #review_startup \n" +
      new_summary +
      "\n# Stop Indexing \n## Notes\n" +
      sel;
    editor.replaceSelection(replacement);
    status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    status.setAttr("title", "Copilot is ready");
  }
  async push_startups_to_affinity(status) {
    const files = this.app.vault.getMarkdownFiles();
    status.setText(
      "\u{1F9D1}\u200D\u{1F680}: VC Copilot syncing with Affinity..."
    );
    status.setAttr("title", "Copilot is pushing startup info to Affinity...");
    for (let item of files) {
      let file_content = await this.app.vault.read(item);
      if (startup_ready_for_affinity(file_content)) {
        let [title, substrings] = extract_title_and_note(file_content);
        let startup_name = String(title);
        startup_name = clean_text(startup_name);
        let note = substrings[1];
        note = note.replace(/^(==|\*\*|#{2,})$/g, "");
        let startup_updated = await update_affinity_startup(startup_name, note);
        if (startup_updated) {
          file_content = file_content.replace(/#Affinity/g, "");
          this.app.vault.modify(item, file_content);
        }
      }
    }
    new import_obsidian4.Notice("Done!");
    status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    status.setAttr("title", "Copilot is ready");
  }
  async summarize_all_vc(status) {
    const files = this.app.vault.getMarkdownFiles();
    status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot summarizing...");
    status.setAttr(
      "title",
      "VC Copilot is summarizing all your VC connections..."
    );
    for (let item of files) {
      let file_content = await this.app.vault.read(item);
      if (is_summarizable(file_content)) {
        console.log(`We are changing file: ${item.name}`);
        let [new_text, summary, title] = await summarize_vc_text(file_content);
        if (title != "") {
          this.app.vault.modify(item, new_text);
          new import_obsidian4.Notice(`${title} has been summarized`);
        }
      }
    }
    status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    status.setAttr("title", "VC Copilot is ready");
  }
  async push_vcs_to_affinity(status) {
    const files = this.app.vault.getMarkdownFiles();
    status.setText(
      "\u{1F9D1}\u200D\u{1F680}: VC Copilot syncing with Affinity..."
    );
    status.setAttr("title", "Copilot is pushing VCs info to Affinity...");
    for (let item of files) {
      let file_content = await this.app.vault.read(item);
      if (vc_ready_for_affinity(file_content)) {
        let [title, substrings] = extract_title_and_note(file_content);
        let summary = substrings[1];
        let person_name = String(title);
        person_name = clean_text(person_name);
        let note = substrings[1];
        note = note.replace(/^(==|\*\*|#{2,})$/g, "");
        let person = await get_person_by_name(affinityAPIKey, person_name);
        if (person) {
          let person_id = person["id"];
          let person_details = await get_person_details(
            affinityAPIKey,
            person_id
          );
          let list_entry_id = await is_person_in_venture_network(
            affinityAPIKey,
            person_details,
            venture_network_list
          );
          if (list_entry_id != null) {
          } else {
            await add_entry_to_list(
              affinityAPIKey,
              venture_network_list,
              person_id
            );
            let person_details2 = await get_person_details(
              affinityAPIKey,
              person_id
            );
            list_entry_id = await is_person_in_venture_network(
              affinityAPIKey,
              person_details2,
              venture_network_list
            );
            await add_field_value(
              affinityAPIKey,
              connection_owner_field,
              person_id,
              owner_value,
              list_entry_id
            );
          }
          let result = await add_notes_to_person(
            affinityAPIKey,
            person_id,
            note
          );
          if (result) {
            new import_obsidian4.Notice(
              `VC: ${person_name} was updated on Affinity`
            );
            file_content = file_content.replace(/#Affinity/g, "");
            this.app.vault.modify(item, file_content);
          } else {
            new import_obsidian4.Notice(
              `VC: ${person_name} was FOUND but NOT updated on Affinity`
            );
          }
        } else {
          new import_obsidian4.Notice(
            `VC: ${person_name} was NOT FOUND on Affinity`
          );
        }
      }
    }
    status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    status.setAttr("title", "Copilot is ready");
  }
  async url_research(url, editor) {
    this.status.setText(
      `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot researching ${url}...`
    );
    this.status.setAttr("title", "Copilot is researching the url");
    let final_text = "";
    let position = editor.getCursor();
    try {
      const res = await fetch(
        "https://url-researcher-container-xm5lmdnsxq-ey.a.run.app",
        {
          method: "post",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            url,
            openai_key: openaiAPIKey,
          }),
        }
      );
      final_text = await res.text();
      final_text = format_url_text(final_text, url);
    } catch (error) {
      console.log(`Error when doing url research: ${error}`);
      new import_obsidian4.Notice(`Error when doing url research`);
    }
    this.displaymessage(final_text, editor, position);
  }
  async insert_header(headerNumber, headerMessage, editor) {
    let header = "";
    for (let i = 0; i < headerNumber; i++) {
      header += "#";
    }
    header += " ";
    header += headerMessage + "\n";
    editor.replaceRange(header, editor.getCursor());
    editor.setCursor(editor.getCursor()["line"] + 1, 0);
  }
  async insert_openai_streaming(response, editor) {
    var _a3, _b;
    for await (let completion of response) {
      let message =
        ((_b = (_a3 = completion.choices[0]) == null ? void 0 : _a3.delta) ==
        null
          ? void 0
          : _b.content) || "";
      editor.replaceRange(message, editor.getCursor());
      editor.setCursor(
        editor.getCursor()["line"],
        editor.getCursor()["ch"] + message.length
      );
    }
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    this.status.setAttr("title", "Copilot is ready");
  }
  async defensibility_analysis(startup_description, editor) {
    let position = editor.getCursor();
    let system_prompt = DEFENSIBILITY_ANALYSIS_SYSTEM_PROMPT;
    let query =
      "Startup Description:\n" +
      startup_description +
      "\nWhat types of defensibility does this startup have? Which types of defensibility does it lack or could improve upon? Let us think step by step";
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680}: VC Copilot analyzing defensibility..."
    );
    this.status.setAttr(
      "title",
      "VC Copilot is analyzing defensibility of the startup..."
    );
    this.insert_header(2, "Defensibility Analysis", editor);
    let analysis = await openai_js(
      gpt_4_latest2,
      query,
      system_prompt,
      1024,
      1,
      true
    );
    await this.insert_openai_streaming(analysis, editor);
  }
  create_loading_interval(description) {
    let counter = 0;
    let loadingInterval = setInterval(() => {
      let emojis = [
        "\u{1F315}",
        "\u{1F316}",
        "\u{1F317}",
        "\u{1F318}",
        "\u{1F311}",
        "\u{1F312}",
        "\u{1F313}",
        "\u{1F314}",
      ];
      new import_obsidian4.Notice(
        `\u{1F9D1}\u200D\u{1F680} ${description} ${emojis[counter]}`,
        1e3
      );
      counter = (counter + 1) % emojis.length;
    }, 1500);
    return loadingInterval;
  }
  async guidance_workflow(startup_description, isGroq, editor) {
    let position = editor.getCursor();
    let system_prompt = GUIDANCE_WORKFLOW_SYSTEM_PROMPT;
    let query =
      "Startup Description:\n" +
      startup_description +
      "\nWhat is the core problem this startup is solving? Give a concise answer.";
    let user_queries = [];
    user_queries.push(query);
    let hypothesis =
      "What are the core hypotheses the startup has to validate to prove that solving this core problem is important enough to allow them to build a unicorn?";
    user_queries.push(hypothesis);
    let classify =
      "Recommend some suitable product categories to classify the product";
    user_queries.push(classify);
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680}: VC Copilot analyzing startup..."
    );
    this.status.setAttr("title", "VC Copilot is analyzing the startup...");
    let loadingInterval = this.create_loading_interval("Analyzing the startup");
    let repliesPromise = openai_js_multiturn(
      user_queries,
      system_prompt,
      isGroq,
      1024,
      1
    );
    repliesPromise
      .then((replies) => {
        clearInterval(loadingInterval);
        replies[0] =
          "## Analysis Workflow\n\n#### Core Problem\n\n" + replies[0] + "\n";
        replies[1] = "#### Hypotheses\n\n" + replies[1] + "\n";
        replies[2] = "#### Categories\n\n" + replies[2] + "\n";
        let final_text = replies[0] + replies[1] + replies[2];
        this.displaymessage(final_text, editor, position);
      })
      .catch((error) => {
        clearInterval(loadingInterval);
        new import_obsidian4.Notice(`An error occurred. Check Console`, 500);
        console.error(error);
      });
  }
  clean_final_summary(final_summary) {
    final_summary = final_summary.replace(/\*\*Team(:)?\*\*/g, "#### Team");
    final_summary = final_summary.replace(
      /\*\*Problem(:)?\*\*/g,
      "#### Problem"
    );
    final_summary = final_summary.replace(
      /\*\*Product(:)?\*\*/g,
      "#### Product"
    );
    final_summary = final_summary.replace(
      /\*\*Traction(:)?\*\*/g,
      "#### Traction"
    );
    final_summary = final_summary.replace(
      /\*\*Competition(:)?\*\*/g,
      "#### Competition"
    );
    final_summary = final_summary.replace(
      /\*\*Round Info(:)?\*\*/g,
      "#### Round Info"
    );
    final_summary = final_summary.replace(/\*\*Other(:)?\*\*/g, "#### Other");
    final_summary = final_summary.replace("- #### Team", "#### Team");
    final_summary = final_summary.replace("- #### Problem", "#### Problem");
    final_summary = final_summary.replace("- #### Product", "#### Product");
    final_summary = final_summary.replace("- #### Traction", "#### Traction");
    final_summary = final_summary.replace(
      "- #### Competition",
      "#### Competition"
    );
    final_summary = final_summary.replace(
      "- #### Round Info",
      "#### Round Info"
    );
    final_summary = final_summary.replace("- #### Other", "#### Other");
    return final_summary;
  }
  async summarize_transcript(paragraphs, meeting_name) {
    let summaries = [];
    let final_summary = "";
    let long_paragraph = "";
    let extended_paragraphs = [];
    let loadingInterval = this.create_loading_interval(
      "Summarizing sections of the transcript"
    );
    try {
      for (let paragraph of paragraphs) {
        let number_of_words = countWords(paragraph);
        if (number_of_words >= 12) {
          if (number_of_words + countWords(long_paragraph) <= 2500) {
            long_paragraph += paragraph;
          } else {
            extended_paragraphs.push(long_paragraph);
            long_paragraph = paragraph;
          }
        }
      }
      if (long_paragraph.length != 0) {
        extended_paragraphs.push(long_paragraph);
      }
      this.status.setText(
        `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot summarizing sections of the transcript of ${meeting_name}...`
      );
      this.status.setAttr(
        "title",
        "Copilot is summarizing sections of the transcript"
      );
      for (let paragraph of extended_paragraphs) {
        let summary = await summarize_paragraph(paragraph);
        summaries.push(summary);
      }
      clearInterval(loadingInterval);
      loadingInterval = this.create_loading_interval(
        "Summarizing full transcript"
      );
      this.status.setText(
        `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot summarizing the full transcript of ${meeting_name}...`
      );
      this.status.setAttr(
        "title",
        "Copilot is summarizing the full transcript"
      );
      final_summary = await summarize_all_paragraphs_together(summaries);
      clearInterval(loadingInterval);
      final_summary = this.clean_final_summary(final_summary);
      final_summary =
        `## ${meeting_name} call summary
#review_startup
` + final_summary;
    } catch (error) {
      clearInterval(loadingInterval);
      console.log(`Error during fireflies summary: ${error}`);
      new import_obsidian4.Notice(`Error during fireflies summary`);
    }
    return final_summary;
  }
  async fireflies_summary(meeting_name, editor) {
    this.status.setText(
      `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot reading the transcript of ${meeting_name}...`
    );
    this.status.setAttr("title", "Copilot is reading the transcript");
    let final_summary = "";
    let cursor_position = editor.getCursor();
    let id = await get_meeting_id(meeting_name, fireflies_api_key);
    let paragraphs = await get_meeting_transcript_by_id(
      id,
      investor_names,
      fireflies_api_key
    );
    final_summary = await this.summarize_transcript(paragraphs, meeting_name);
    editor.replaceRange(final_summary, cursor_position);
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    this.status.setAttr("title", "Copilot is ready");
  }
  async fireflies_summary_temp(transcript_json_string, meeting_name, editor) {
    this.status.setText(
      `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot reading the transcript of ${meeting_name}...`
    );
    this.status.setAttr("title", "Copilot is reading the transcript");
    let cursor_position = editor.getCursor();
    let transcript = await transcript_json_to_array_string(
      transcript_json_string,
      investor_names
    );
    let final_summary = await this.summarize_transcript(
      transcript,
      meeting_name
    );
    editor.replaceRange(final_summary, cursor_position);
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    this.status.setAttr("title", "Copilot is ready");
  }
  async turn_paragraphs_into_chunks(paragraphs) {
    let long_paragraph = "";
    let extended_paragraphs = [];
    for (let paragraph of paragraphs) {
      let number_of_words = countWords(paragraph);
      if (number_of_words + countWords(long_paragraph) <= 2500) {
        long_paragraph += paragraph + "\n\n";
      } else {
        extended_paragraphs.push(long_paragraph);
        long_paragraph = paragraph;
      }
    }
    if (long_paragraph.length != 0) {
      extended_paragraphs.push(long_paragraph);
    }
    return extended_paragraphs;
  }
  async spoke_find_recording_id(meeting_name) {
    let response = await (0, import_obsidian4.request)({
      url: `https://api.spoke.app/projects/search?name=${meeting_name}&page=0&page_size=10&workspace_id=93424`,
      method: "GET",
      headers: {
        Authorization:
          "XnLd5LKbMbFm=sfmy7JZmpsTq0f-?cZIvq?3UOIhlkZIhi916vni2tkj1!Lapl/O/G2byTWHryxm4qRA54JLmwqwkjSn8p3szDtC/edurdW1=9iYecV!EwEpyb2=auPb!8Iw6?vHZxp?j!odL?=mJgybq9PGqwO5Y2rP?=0D?5T?7Wmn9u5/V1EKuzqTPsVFIxUEI!Jf-aAN3!SXdIDdpXFGbl2SaOUjb3EADoJWi5hQNI8I3frswrr=-6L-ozAluLINp0zH9?CrS20X?YZNKh6Hp=pvDCyesJL9CEXVTMJvAdrb5eP2-!mV7DyMS8YfMr5CBPtmDfgKJPDs5XWh!t5N-Zbf?oC5zoGusbwqfdSs36Ad!SlboJvbPEY2N94uVygMxybTmmdSdRO6qWO=!IO!n4aKLRcSOMhKeX8!lcWNxEgvtRPBnQFdQw3sJ-UKGsnuQ2K69tdQie4zNzMYrFcbUKkGrH5y3H/iqoeTsi5GHlxTBRTsECpxzSLCK5ij",
      },
    });
    let result = JSON.parse(response);
    return result["hits"][0]["document"]["id"];
  }
  async spoke_details(meeting_id) {
    let response = await (0, import_obsidian4.request)({
      url: `https://api.spoke.app/projects/complete/${meeting_id}`,
      method: "GET",
      headers: {
        Authorization:
          "XnLd5LKbMbFm=sfmy7JZmpsTq0f-?cZIvq?3UOIhlkZIhi916vni2tkj1!Lapl/O/G2byTWHryxm4qRA54JLmwqwkjSn8p3szDtC/edurdW1=9iYecV!EwEpyb2=auPb!8Iw6?vHZxp?j!odL?=mJgybq9PGqwO5Y2rP?=0D?5T?7Wmn9u5/V1EKuzqTPsVFIxUEI!Jf-aAN3!SXdIDdpXFGbl2SaOUjb3EADoJWi5hQNI8I3frswrr=-6L-ozAluLINp0zH9?CrS20X?YZNKh6Hp=pvDCyesJL9CEXVTMJvAdrb5eP2-!mV7DyMS8YfMr5CBPtmDfgKJPDs5XWh!t5N-Zbf?oC5zoGusbwqfdSs36Ad!SlboJvbPEY2N94uVygMxybTmmdSdRO6qWO=!IO!n4aKLRcSOMhKeX8!lcWNxEgvtRPBnQFdQw3sJ-UKGsnuQ2K69tdQie4zNzMYrFcbUKkGrH5y3H/iqoeTsi5GHlxTBRTsECpxzSLCK5ij",
      },
    });
    let result = JSON.parse(response);
    let meeting_name = result["name"];
    let conversation = result["editors"];
    let paragraphs = [];
    for (let turn_to_speak of conversation) {
      let transcripts = turn_to_speak["video"]["transcripts"];
      let transcript = transcripts[0];
      if (transcripts.length > 1) {
        console.log(transcripts);
      }
      let speaker_name = transcript["speaker"];
      if (investor_names.includes(speaker_name)) {
        speaker_name += ` (Investor)`;
      }
      let words = transcript["original_words"];
      if (words.length > 0) {
        let sentence = "";
        for (let word of words) {
          sentence += word["text"] + " ";
        }
        let paragraph = speaker_name + ":\n" + sentence;
        paragraphs.push(paragraph);
      }
    }
    return paragraphs;
  }
  async summarize_spoke_meeting(editor, meeting_name, isDetailed) {
    let cursor_position = editor.getCursor();
    let loadingInterval = this.create_loading_interval(
      "Summarizing sections of the transcript"
    );
    try {
      let meeting_id = await this.spoke_find_recording_id(meeting_name);
      let paragraphs = await this.spoke_details(meeting_id);
      let final_summary = "";
      this.status.setText(
        `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot summarizing sections of the transcript of ${meeting_name}...`
      );
      this.status.setAttr(
        "title",
        "Copilot is summarizing sections of the transcript"
      );
      if (isDetailed) {
        let summaries = [];
        let conversation_chunks = await this.turn_paragraphs_into_chunks(
          paragraphs
        );
        for (let conversation_chunk of conversation_chunks) {
          let summary = await summarize_paragraph(conversation_chunk);
          summaries.push(summary);
        }
        clearInterval(loadingInterval);
        loadingInterval = this.create_loading_interval(
          "Summarizing full transcript"
        );
        this.status.setText(
          `\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot summarizing the full transcript of ${meeting_name}...`
        );
        this.status.setAttr(
          "title",
          "Copilot is summarizing the full transcript"
        );
        final_summary = await summarize_all_paragraphs_together(summaries);
      } else {
        let full_transcript = paragraphs.join("\n\n");
        full_transcript = full_transcript.trim();
        final_summary = await summarize_paragraph(full_transcript);
      }
      clearInterval(loadingInterval);
      final_summary = this.clean_final_summary(final_summary);
      final_summary =
        `## ${meeting_name} call summary
#review_startup
` + final_summary;
      this.displaymessage(final_summary, editor, cursor_position);
      this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
      this.status.setAttr("title", "Copilot is ready");
    } catch (error) {
      clearInterval(loadingInterval);
      console.log(`Error during Spoke summary: ${error}`);
      new import_obsidian4.Notice(`Error during Spoke summary`);
    }
  }
  async market_research(industry, editor) {
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot researching the market..."
    );
    this.status.setAttr("title", "Copilot is researching the market...");
    let res;
    let position = editor.getCursor();
    let loadingInterval = this.create_loading_interval(
      `Researching the market`
    );
    try {
      let websites = ["", "globenewswire.com", "statista.com"];
      let query = `${industry} industry market report.`;
      let promises = websites.map((website) =>
        specific_web_research("market-research", website, query, openai, editor)
      );
      let results = await Promise.all(promises);
      let message = results.join("\n\n");
      message += "#### Further Material\n";
      message += "Here are some reading material for further information\n\n";
      query = `${industry} industry primer pdf`;
      let pdfs = await you_research(query);
      for (let element of pdfs) {
        let snippets = element["snippets"];
        let title = element["title"];
        let url = element["url"];
        message += `- [${title}](${url})
`;
      }
      message = "## Market Research\n" + message;
      clearInterval(loadingInterval);
      this.displaymessage(message, editor, position);
    } catch (error) {
      clearInterval(loadingInterval);
      console.log(`Error when doing market research: ${error}`);
      new import_obsidian4.Notice(`Error when doing market research`);
    }
  }
  async competition_research(query, editor) {
    let position = editor.getCursor();
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot researching competition..."
    );
    this.status.setAttr("title", "Copilot is researching competition...");
    let loadingInterval = this.create_loading_interval(
      `Researching competition`
    );
    try {
      let websites = ["techcrunch.com", "businessinsider.com"];
      let promises = websites.map((website) =>
        specific_web_research("competition", website, query, openai, editor)
      );
      let results = await Promise.all(promises);
      let message = results.join("\n\n");
      clearInterval(loadingInterval);
      message = "## Competition Research\n" + message;
      this.displaymessage(message, editor, position);
    } catch (error) {
      clearInterval(loadingInterval);
      console.log(`Error when doing market research: ${error}`);
      new import_obsidian4.Notice(`Error when doing market research`);
    }
  }
  async displaymessage(message, editor, position) {
    editor.replaceRange(message, position);
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    this.status.setAttr("title", "Copilot is ready");
  }
  async custom_search(task, website, search_query, editor) {
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680} \u{1F50E}: VC Copilot surfing the internet..."
    );
    this.status.setAttr("title", "Copilot is surfing...");
    let position = editor.getCursor();
    let loadingInterval = this.create_loading_interval("Searching");
    let message = await specific_web_research(
      task,
      website,
      search_query,
      openai,
      editor
    );
    clearInterval(loadingInterval);
    this.displaymessage(message, editor, position);
  }
  async getPathAndTextOfActiveFile() {
    let file = this.app.workspace.getActiveFile();
    let vault_path = file == null ? void 0 : file.vault.adapter.basePath;
    let filePath = vault_path + "/" + (file == null ? void 0 : file.path);
    let fileText = fs.readFileSync(filePath, "utf-8");
    return [filePath, fileText];
  }
  async reformat_notes(editor) {
    let notes = editor.getSelection();
    let message_without_headers = "";
    let activeFile = await this.app.workspace.getActiveFile();
    let fileText;
    const system_prompt = `Act as a veteran venture capital investor. You are very precise and concise. You are tasked with helping a junior venture capital investor in his due diligence about a startup. You always write full sentences in bullet points. Always mention hard facts like numbers and statistics.`;
    const user_prompt = `The notes of the junior venture capitalist will be delimited by triple quotes. Understand the context of these notes then summarize them more clearly and concisely in bullet points. Do not generate key takeaways or another summary after the initial bullet points.

"""${notes}"""`;
    this.status.setText(
      "\u{1F9D1}\u200D\u{1F680}: VC Copilot rewriting notes..."
    );
    this.status.setAttr("title", "VC Copilot is rewriting notes...");
    const headers = extractHeadersFromNotes(notes);
    let message = await openai_js(
      gpt_3_latest,
      user_prompt,
      system_prompt,
      256,
      0
    );
    message_without_headers = message;
    for (let i = headers.length - 1; i >= 0; i--) {
      message = headers[i] + "\n" + message;
    }
    if (activeFile) {
      fileText = await this.app.vault.process(activeFile, (data) => {
        return data.replace(notes, message);
      });
    } else {
      new import_obsidian4.Notice(
        `You must remain on the file where you want the command to work`
      );
      return "";
    }
    return message_without_headers;
  }
  async reformat_and_update_master_note(editor) {
    let activeFile = await this.app.workspace.getActiveFile();
    let message_without_headers = await this.reformat_notes(editor);
    if (activeFile) {
      await this.update_master_note_with_notes(
        message_without_headers,
        activeFile,
        editor
      );
    } else {
      new import_obsidian4.Notice(
        `You must remain on the file where you want the command to work`
      );
      return;
    }
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot ready");
    this.status.setAttr("title", "Copilot is ready");
  }
  async update_master_note_with_selected_text(editor) {
    let activeFile = this.app.workspace.getActiveFile();
    let notes = editor.getSelection();
    if (activeFile) {
      await this.update_master_note_with_notes(notes, activeFile, editor);
    } else {
      new import_obsidian4.Notice(
        `You must remain on the file where you want the command to work`
      );
      return;
    }
  }
  async update_master_note_with_notes(notes, activeFile, editor) {
    let fileText;
    let text_with_category = await this.categorize_notes(notes);
    console.log(`Text with Category: ${text_with_category}`);
    let updates = this.get_updates_from_categories(text_with_category);
    let update_messages = this.create_update_messages(updates);
    if (activeFile) {
      fileText = await this.app.vault.read(activeFile);
    } else {
      new import_obsidian4.Notice(
        `You must remain on the file where you want the command to work`
      );
      return;
    }
    const allHeaders = extractHeadersFromNotes(fileText);
    let startHeader = "#### Team";
    let affinity_updates = [];
    for (const update_type in update_messages) {
      fileText = await this.app.vault.read(activeFile);
      let update_text = update_messages[update_type];
      startHeader = getStartHeader(update_type);
      let note = notes.split("\n")[0];
      let nearestHeader = find_the_nearest_header(note, fileText);
      nearestHeader = nearestHeader.replace(/^[#\s]+/, "");
      let source = "-- [[#" + nearestHeader + "]]";
      if (startHeader == "") {
        new import_obsidian4.Notice(
          `The active file does not have the usual startup file format`
        );
        continue;
      }
      let startCursorPosition;
      let endCursorPosition;
      let matchedHeader;
      [startCursorPosition, endCursorPosition, matchedHeader] = getCursorRange(
        fileText,
        startHeader,
        editor,
        allHeaders
      );
      let originalText = editor.getRange(
        startCursorPosition,
        endCursorPosition
      );
      originalText = matchedHeader + originalText;
      update_text = update_text + source;
      if (activeFile) {
        await this.app.vault.process(activeFile, (data) => {
          return data.replace(
            originalText,
            originalText +
              `

${update_text}`
          );
        });
      }
      affinity_updates.push(update_text);
    }
    if (affinityAPIKey != "" && affinityAPIKey != "default") {
      let startup_name = activeFile.basename;
      for (let affinity_update of affinity_updates) {
        update_affinity_startup(startup_name, affinity_update);
      }
    }
  }
  get_updates_from_categories(text_with_category) {
    let updates = {};
    let lines = text_with_category.split("\n");
    for (let line of lines) {
      let chunks = line.split("::");
      let text = chunks[0];
      let category = chunks[1];
      if (!updates.hasOwnProperty(category)) {
        updates[category] = [text];
      } else {
        updates[category].push(text);
      }
    }
    return updates;
  }
  create_update_messages(updates) {
    let messages = [];
    let update_messages = {};
    const today = new Date();
    const currentDate = today.toISOString().split("T")[0];
    for (let [category, updates_array] of Object.entries(updates)) {
      let message = `###### ${category} updates on ${currentDate}
`;
      for (let update of updates_array) {
        message = message + "- " + update + "\n";
      }
      update_messages[category] = message;
    }
    return update_messages;
  }
  async categorize_notes(notes) {
    const response = await openai.chat.completions.create({
      model: gpt_4_latest2,
      messages: [
        {
          role: "system",
          content:
            "You are Frederick, an AI expert in classifying sentences. You are tasked with reading a sentence and deciding to which category it belongs. Remember you're the best AI sentence analyzer and will use your expertise to provide the best possible analysis.",
        },
        {
          role: "user",
          content: `I will give you some sentences about a startup, and you will analyze each sentence choose the right category. You have to choose from the following categories:
- Team: <describes the team behind the startup>
- Product: <describes the product the startup is developing>
- Competition: <describes the competition the startup is facing>
- Ideal Customer Profile: <describes the ideal customer for the startup>
- Funding: <describes the money raised by the startup and its investors>
- Market Size: <describes how big the market is>
- Commercial Traction: <describes the revenues of the startup>
- Other: <does not fit into any of the above categories>

For each sentence reply in the format of \`sentence::category\` Got it?`,
        },
        {
          role: "assistant",
          content:
            "Yes, I understand. I am ready to analyze your sentences and choose the correct category. I will reply in the format of `sentence::category`",
        },
        {
          role: "user",
          content: `Sentences:
"""${notes}"""`,
        },
      ],
      temperature: 0,
      max_tokens: 256,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    });
    let reply = response.choices[0].message.content;
    if (reply == null) {
      reply = "";
    }
    return reply;
  }
  async analyze_pitch_deck(relative_path, editor) {
    let vault_path = "";
    let adapter = app.vault.adapter;
    if (adapter instanceof import_obsidian4.FileSystemAdapter) {
      vault_path = adapter.getBasePath();
    }
    console.log(vault_path);
    let absolute_path = vault_path + "/" + relative_path;
    this.status.setText("\u{1F9D1}\u200D\u{1F680}: VC Copilot analyzing deck");
    this.status.setAttr("title", "Copilot is analyzing");
    this.assistant_start_conv(absolute_path, editor);
  }
  async assistant_replace_citations(openai2, message) {
    let message_content = message.content[0].text;
    let annotations = message_content.annotations;
    let citations = [];
    for (let i = 0; i < annotations.length; i++) {
      let annotation = annotations[i];
      let annotation_text = annotation.text;
      message_content.value = await message_content.value.replace(
        annotation_text,
        `[${i + 1}]`
      );
      if (annotation.file_citation) {
        const cited_file = await openai2.files.retrieve(
          annotation.file_citation.file_id
        );
        citations.push(`##### [${i + 1}]
 ${annotation.file_citation.quote}
 **from ${cited_file.filename}**`);
      } else if (annotation.file_path) {
        const cited_file = await openai2.files.retrieve(
          annotation.file_path.file_id
        );
        citations.push(
          `##### [${i + 1}] Click <here> to download ${cited_file.filename}`
        );
      }
    }
    message_content.value += "\n\n#### Sources:\n" + citations.join("\n\n");
    return message;
  }
  async assistant_displaymessage(
    openai2,
    thread,
    run,
    messages,
    editor,
    editor_position
  ) {
    let message = messages.data[0];
    message = await this.assistant_replace_citations(openai2, message);
    let final_message = message.content[0].text.value;
    this.displaymessage(final_message, editor, editor_position);
  }
  async assistant_check_thread_status(
    openai2,
    thread,
    run,
    editor,
    editor_position
  ) {
    const run_status = await openai2.beta.threads.runs.retrieve(
      thread.id,
      run.id
    );
    console.log(run_status.status);
    if (run_status.status == "completed") {
      console.log("successful!");
      clearInterval(intervalId);
      const messages = await openai2.beta.threads.messages.list(thread.id);
      this.assistant_displaymessage(
        openai2,
        thread,
        run,
        messages,
        editor,
        editor_position
      );
    }
  }
  async assistant_start_conv(deck_path, editor) {
    let editor_position = editor.getCursor();
    let deck = await toFile2(fs.createReadStream(deck_path));
    const file = await openai.files.create({
      file: deck,
      purpose: "assistants",
    });
    const assistant = await openai.beta.assistants.create({
      name: "Deck Master",
      instructions:
        "You are a veteran venture capital investor. You are extremely analytical and detail-oriented. You always answer in nested bullet points. Always break down long bullet points into multiple short ones.",
      tools: [{ type: "retrieval" }],
      model: gpt_3_latest,
      file_ids: [file.id],
    });
    const thread = await openai.beta.threads.create();
    const message = await openai.beta.threads.messages.create(thread.id, {
      role: "user",
      content:
        "Read through this pitch deck. Extract the following information:\n- Team\n- Problem the startup is solving\n- Solution\n- Competition\n- Commercial Traction:\n- Market size",
      file_ids: [file.id],
    });
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: assistant.id,
    });
    intervalId = setInterval(
      () =>
        this.assistant_check_thread_status(
          openai,
          thread,
          run,
          editor,
          editor_position
        ),
      500
    );
  }
};
var VCCopilotSettingsTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for your copilot" });
    new import_obsidian4.Setting(containerEl)
      .setName("OpenAI API Key")
      .setDesc("Your OpenAI API Key")
      .addText((text) =>
        text
          .setPlaceholder("Enter key")
          .setValue(this.plugin.settings.openAIKey)
          .onChange(async (value) => {
            this.plugin.settings.openAIKey = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Groq API Key")
      .setDesc("Your Groq API Key")
      .addText((text) =>
        text
          .setPlaceholder("Enter key")
          .setValue(this.plugin.settings.groqAIKey)
          .onChange(async (value) => {
            this.plugin.settings.groqAIKey = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Affinity: API Key")
      .setDesc("Your Affinity API Key")
      .addText((text) =>
        text
          .setPlaceholder("Enter key")
          .setValue(this.plugin.settings.affinityKey)
          .onChange(async (value) => {
            this.plugin.settings.affinityKey = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Affinity: Owner Value")
      .setDesc(
        "Every person has a code on Affinity. Please give in the code for the person that should be added as owner of startups and VCs that gets pushed"
      )
      .addText((text) =>
        text
          .setPlaceholder("Enter value")
          .setValue(this.plugin.settings.owner_person_value)
          .onChange(async (value) => {
            this.plugin.settings.owner_person_value = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Affinity: Connection Owner Field ID")
      .setDesc(
        "Depending on the list you save fellow VCs in, there is a field that represent the 'connection owner with the fund', enter the field id here"
      )
      .addText((text) =>
        text
          .setPlaceholder("Enter value")
          .setValue(this.plugin.settings.connection_owner_field_id)
          .onChange(async (value) => {
            this.plugin.settings.connection_owner_field_id = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Affinity: Venture Network List ID")
      .setDesc(
        "Please enter the list id for the list you save your relationships with VCs in"
      )
      .addText((text) =>
        text
          .setPlaceholder("Enter value")
          .setValue(this.plugin.settings.venture_network_list_id)
          .onChange(async (value) => {
            this.plugin.settings.venture_network_list_id = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Investor Names")
      .setDesc(
        "Enter the names of your team members (investors) separated by a comma. This helps the Fireflies summarizer to focus more on the founder"
      )
      .addText((text) =>
        text
          .setValue(this.plugin.settings.team_names)
          .onChange(async (value) => {
            this.plugin.settings.team_names = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Fireflies API Key")
      .setDesc("Enter the Fireflies API Key")
      .addText((text) =>
        text
          .setValue(this.plugin.settings.fireflies_api)
          .onChange(async (value) => {
            this.plugin.settings.fireflies_api = value;
            await this.plugin.saveSettings();
          })
      );
    new import_obsidian4.Setting(containerEl)
      .setName("Tracxn API Key")
      .setDesc("Enter the Tracxn API Key")
      .addText((text) =>
        text
          .setValue(this.plugin.settings.tracxn_api)
          .onChange(async (value) => {
            this.plugin.settings.tracxn_api = value;
            await this.plugin.saveSettings();
          })
      );
  }
};
//! this will be weird if it happens
//!OpenAI does not support electron yet, this is a work around (https://github.com/openai/openai-node/issues/284)
//# sourceMappingURL=data:application/json;base64,
